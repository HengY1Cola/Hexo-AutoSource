<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Gin+Fail2ban+Cloudfare实现防爆破扫描</title>
      <link href="/article/a637161.html"/>
      <url>/article/a637161.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言：">前言：</h2><p>最近受某学长刺激，授权爆破他的网站，短时间内就被他的网站防住了～</p><p>好滴～ 最近又开始捣鼓服务器了，我也想搞～ 所以我就简单说一下我的实现。</p><div class="note green icon flat"><i class="note-icon fas fa-bullhorn"></i><p>以下我简单说下我的思路来<strong>实现防爆破与CC等攻击</strong>：👇</p><ol><li>通过Cloudfare获取到原始IP</li><li>Fail2ban读取日志</li><li>回调通知Cloudfare进行防御</li></ol><p>要用到的有：<code>Gin框架</code>与<code> nginx服务器</code>与<code>cloudfare免费版</code>与<code>Fail2ban</code>工具</p></div><h2 id="获取到原始IP">获取到原始IP</h2><p>其实有个思路是已经<strong>有模块与nginx进行二进制编译后</strong></p><p><code>access日志</code>就已经是原始IP了，但是刚好我是后端接口怼的CF</p><p>那么我为什么不写个中间件然后模拟Nginx日志结构，同样实现日志。</p><p>说干就干，下面直接贴代码： （<strong>实现了高并发下的读写</strong>）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> middleware</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;GoBackEnd/common&quot;</span> <span class="comment">// 这里自己改下</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// NginxLogMiddleware 为记录CF原始IP</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NginxLogMiddleware</span><span class="params">()</span> <span class="title">gin</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> bodySize <span class="keyword">int</span></span><br><span class="line"><span class="comment">// todo 拿到目录路径</span></span><br><span class="line">nginxPath := common.Path(<span class="string">&quot;access.log&quot;</span>) <span class="comment">// 自己写个函数获取哈～</span></span><br><span class="line"><span class="comment">// todo 拿到将要合成的信息</span></span><br><span class="line">ip := c.ClientIP()</span><br><span class="line">utcTimeStr := time.Now().Format(<span class="string">&quot;02/Jan/2006:15:04:05&quot;</span>)</span><br><span class="line">url := c.Request.URL</span><br><span class="line">method := c.Request.Method</span><br><span class="line">status := c.Writer.Status()</span><br><span class="line">body, err := ioutil.ReadAll(c.Request.Body)</span><br><span class="line">http := c.Request.Proto</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">bodySize = <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line">bodySize = <span class="built_in">len</span>(body)</span><br><span class="line">header := c.Request.UserAgent()</span><br><span class="line"><span class="comment">// todo 写入标准格式</span></span><br><span class="line">res := fmt.Sprintf(<span class="string">&quot;%v - - [%v +8000] \&quot;%v %v %v\&quot; %v %v \&quot;-\&quot; \&quot;%v\&quot;&quot;</span>, ip, utcTimeStr, method, url, http, status, bodySize, header) <span class="comment">// 因为是东八区我就写死了</span></span><br><span class="line"><span class="comment">// todo 写入文件</span></span><br><span class="line">file, _ := os.OpenFile(nginxPath, os.O_WRONLY|os.O_APPEND, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line">wr := &amp;SyncWriter&#123;sync.Mutex&#123;&#125;, file&#125; <span class="comment">// 添加上锁</span></span><br><span class="line">wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(content <span class="keyword">string</span>)</span></span> &#123; <span class="comment">// fork子协程去写</span></span><br><span class="line">fmt.Fprintln(wr, content)</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;(res)</span><br><span class="line">wg.Wait()</span><br><span class="line">c.Next()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SyncWriter <span class="keyword">struct</span> &#123;</span><br><span class="line">m      sync.Mutex</span><br><span class="line">Writer io.Writer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *SyncWriter)</span> <span class="title">Write</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line">w.m.Lock()</span><br><span class="line"><span class="keyword">defer</span> w.m.Unlock()</span><br><span class="line"><span class="keyword">return</span> w.Writer.Write(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/img/mics/image-20220225101411647.webp" alt="" style="zoom:67%;" /><p>然后直接放到默认路由里面，所有流量都要走～</p><img src="/img/mics/image-20220225101614873.webp" alt="" style="zoom:67%;" /><img src="/img/mics/image-20220225101648740.webp" alt="" style="zoom:67%;" /><h2 id="Fail2ban的安装与设置">Fail2ban的安装与设置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install fail2ban</span><br><span class="line">$ systemctl stop fail2ban</span><br><span class="line">$ <span class="built_in">cd</span> /etc/fail2ban</span><br></pre></td></tr></table></figure><p>这里说下Fail2ban的加载文件规则：依次进行</p><ul><li><code>/etc/fail2ban/jail.conf</code></li><li><code>/etc/fail2ban/jail.d/*.conf</code></li><li><code>/etc/fail2ban/jail.local</code></li><li><code>/etc/fail2ban/jail.d/*.local</code></li></ul><p>我们需要做的就是: 分别写入匹配规则与拉黑设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /etc/fail2ban/jail.d</span><br><span class="line">$ vim nginxcc.conf <span class="comment"># 开始写入</span></span><br><span class="line"><span class="comment">##############################</span></span><br><span class="line">[nginxcc]                                                                                                             </span><br><span class="line">enabled = <span class="literal">true</span>                                                                                                        </span><br><span class="line">port = http,https  <span class="comment"># 禁止80 443                                                                                                   </span></span><br><span class="line">filter = nginxcc      <span class="comment"># 使用的是哪个                                                                                                </span></span><br><span class="line">logpath = /home/ubuntu/HengY1Service/access.log <span class="comment"># 框架里面配置的日志                                                       </span></span><br><span class="line">bantime = 1200    <span class="comment"># 被禁止多久                                                                                   </span></span><br><span class="line">findtime = 30     <span class="comment"># 扫描多长时间的                                                                                   </span></span><br><span class="line">maxretry = 10     <span class="comment"># 单位时间内次数                                                                                      </span></span><br><span class="line">action = %(action_mwl)s   <span class="comment"># 调用cloudfare内置脚本                                                                                      </span></span><br><span class="line">         custom-cloudflare   <span class="comment"># custom-cloudflare是后面要自己写的</span></span><br><span class="line">         </span><br><span class="line">:wq</span><br><span class="line"><span class="comment">##############################</span></span><br><span class="line">$ <span class="built_in">cd</span> /etc/fail2ban/filter.d</span><br><span class="line">$ vim nginxcc.conf</span><br><span class="line"><span class="comment">##############################</span></span><br><span class="line">[Definition]</span><br><span class="line">failregex =(?i)^&lt;HOST&gt; .* <span class="string">&quot;(GET|POST|HEAD).*HTTP.*&quot;</span> (404|503) .*$</span><br><span class="line">ignoreregex =.*(robots.txt|favicon.ico|jpg|png|webp|js|css)</span><br><span class="line"></span><br><span class="line">:wq</span><br><span class="line"><span class="comment">##############################</span></span><br></pre></td></tr></table></figure><p>然后验证下自己写对没：access.log最好有点东西</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ fail2ban-regex /home/ubuntu/HengY1Service/access.log /etc/fail2ban/filter.d/nginxcc.conf</span><br><span class="line">$ systemctl restart fail2ban</span><br><span class="line">$ fail2ban-client status <span class="comment"># 看下nginxCC开启没</span></span><br><span class="line">$ fail2ban-client status nginxcc</span><br><span class="line">$ fail2ban-client <span class="built_in">set</span> nginxcc unbanip 1.1.1.1 <span class="comment"># 解封你要的IP</span></span><br></pre></td></tr></table></figure><img src="/img/mics/image-20220225102817422.webp" alt="" style="zoom:80%;" /><h2 id="通知Cloudfare进行防御">通知Cloudfare进行防御</h2><p>到这里的话还是不行的，因为你虽然拿到了源IP，但是是过CDN过来的IP你没有封</p><p>但是Fail2ban已经考虑到了，提供了脚本。这就是为什么要设置<code>action</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /etc/fail2ban/action.d</span><br><span class="line">$ cp cloudflare.conf custom-cloudflare.conf</span><br><span class="line">$ vim custom-cloudflare.conf <span class="comment"># 翻看到最下面</span></span><br><span class="line"><span class="comment"># 填写 cftoken 与 cfuser cfuser就是你注册的邮件 cftoken 是GlobalToken</span></span><br><span class="line">$ systemctl restart fail2ban</span><br></pre></td></tr></table></figure><img src="/img/mics/image-20220225103713641.webp" alt="" style="zoom:67%;" /><p>然后可以自己试试效果了～  （我的是：api.hengy1.top） 可以来试试效果</p><img src="/img/mics/image-20220225103819706.webp" alt="" style="zoom:67%;" /><img src="/img/mics/image-20220225104523559.webp" alt="" style="zoom:67%;" /><h2 id="总结：">总结：</h2><p>逼逼两句：</p><ol><li>构造日志参数与高并发读写要注意</li><li>正则匹配必须有&lt;HOST&gt;，正则测试https://regex101.com/</li><li>一定要CF来防御，思路得先串通</li><li>Fail2ban有点反应延迟</li></ol>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python浅谈多线程</title>
      <link href="/article/6e07425f.html"/>
      <url>/article/6e07425f.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言：-5">前言：</h2><p>只要玩过<strong>爬虫</strong>的，就知道线程的必要性。但是我学习线程的路子比较野～</p><p>所以学的不是那么<strong>系统</strong>，最近没事来看看把重要的部分都来掌握下。</p><p>然后也就“<strong>简简单单</strong>”水一篇重点部分（主要我怕后面忘记了QAQ）</p><h2 id="引入：">引入：</h2><p><code>什么是GIL?</code>  在实现Python解析器(CPython)时所引入的一个概念，GIL这把超级大锁，是加在全局上的</p><p>同一个时刻只有一个线程在一个cpu上执行字节码, 无法将多个线程映射到多个cpu上执行</p><p>但是GIL会主动释放：1. 根据执行的字节码行数以及时间片释放；2. 在遇到io的操作时候主动释放</p><blockquote><p><em>In CPython, the global interpreter lock, or GIL, is a mutex that prevents multiple native threads from executing Python bytecodes at once. This lock is necessary mainly because CPython’s memory management is not thread-safe. (However, since the GIL exists, other features have grown to depend on the guarantees that it enforces.)</em></p></blockquote><p>看个例子：这个怎么都不会实现为0。具体如何解决看后面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>():</span></span><br><span class="line">    <span class="keyword">global</span> total</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">        total += <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">desc</span>():</span></span><br><span class="line">    <span class="keyword">global</span> total</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">        total -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">thread1 = threading.Thread(target=add)</span><br><span class="line">thread2 = threading.Thread(target=desc)</span><br><span class="line">thread1.start()</span><br><span class="line">thread2.start()</span><br><span class="line"><span class="built_in">print</span>(total)</span><br></pre></td></tr></table></figure><h2 id="Thread的基础">Thread的基础</h2><p>这里面的几个点：</p><ol><li>除了最基础的写法，还可以继承<code>threading.Thread</code>重构方法：例如Run方法，将逻辑写在里面</li><li>使用多线程的基本API的掌握，这里就不贴每个API什么意思。翻翻文档就好啦</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetDetailHtml</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name=name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;get detail html started&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;get detail html end&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetDetailUrl</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name=name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;get detail url started&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">4</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;get detail url end&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    thread1 = GetDetailHtml(<span class="string">&quot;get_detail_html&quot;</span>)</span><br><span class="line">    thread2 = GetDetailUrl(<span class="string">&quot;get_detail_url&quot;</span>)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    thread1.start()</span><br><span class="line">    thread2.start()</span><br><span class="line">    thread1.join()</span><br><span class="line">    thread2.join()</span><br><span class="line">    <span class="comment"># 当主线程退出的时候， 子线程kill掉</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;last time: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(time.time() - start_time))</span><br></pre></td></tr></table></figure><h2 id="多个线程之间的变量">多个线程之间的变量</h2><blockquote><p>会产生需求就是，大家同时操作一个变量。这个变量可以穿梭在各个线程之间</p></blockquote><p>当然这里有个很大的BUG，我当时就很疑惑🤔.</p><p>就是加入现在有2个文件，其中一个是<code>utils.py</code>文件中的一个变量test</p><p>如果你是 <code>import utils</code>然后使用的是<code>utils.test</code>这个的话是可以的</p><p>但是你是<code>from utils import test</code>使用<code>test</code>的话，不管你怎么改变，他就算一个定值了</p><p>我当时就很疑惑为什么<code>flag</code>变量无法是<code>while</code>退出，现在知道避坑了。</p><p>说了这么多，其实就是2个方式</p><ol><li>使用<code>gloabl全局变量</code></li><li>使用<code>queue</code>（推荐）,具体的API翻翻文档/源码都行，不多赘述</li></ol><h2 id="花里胡哨的锁">花里胡哨的锁</h2><h3 id="Lock、RLock">Lock、RLock</h3><blockquote><p>使用锁就很好解决了上面的问题，就可以得到答案为0</p></blockquote><p><code>Lock</code>与<code>RLock</code>的唯一区别就是有效减少死锁的发生</p><p>他们都有共同的<code>.acquire()</code>与<code>.release()</code>这个两个方式</p><p>但是<code>lock.acquire()</code>在不经意之间使用了2次，则会互相等待发生死锁，都不会动了</p><p>而<code>RLock.acquire()</code>可以使用多次并且多次释放，减少死锁竞争的情况。</p><h3 id="condition-使用">condition 使用</h3><blockquote><p>这个使用的情况是：假设现在有2个线程，线程a执行完毕之后呢线程b再执行，线程b执行完毕之后呢再执行线程a</p><p>互相通知对方，多线执行，但可以实现交替</p></blockquote><p>特别注意： 启动的顺序很重要‼️</p><p>掌握2个API： <code>.notify()</code>与<code>.wait()</code>顾名思义：一个通知一个等待</p><p><code>通知</code>就是通知等待的对方你可以开始执行了，<code>等待</code>就是等待对方来通知我</p><h3 id="Semaphore-使用">Semaphore 使用</h3><blockquote><p>这个使用的情况就是：for循环的话一下子启动20个循环，设备顶不住。</p><p>使用Semaphore就可以决定一次性开启多少个</p></blockquote><p>课上这个例子比较经典：</p><p>注意<code>.release()</code>与<code>sem.acquire()</code>的位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HtmlSpider</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url, sem</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.url = url</span><br><span class="line">        self.sem = sem</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;got html text success&quot;</span>)</span><br><span class="line">        self.sem.release()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UrlProducer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, sem</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.sem = sem</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">            self.sem.acquire()</span><br><span class="line">            html_thread = HtmlSpider(<span class="string">&quot;https://baidu.com/&#123;&#125;&quot;</span>.<span class="built_in">format</span>(i), self.sem)</span><br><span class="line">            html_thread.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    sem = threading.Semaphore(<span class="number">3</span>)</span><br><span class="line">    url_producer = UrlProducer(sem)</span><br><span class="line">    url_producer.start()</span><br></pre></td></tr></table></figure><h2 id="线程池的使用">线程池的使用</h2><blockquote><p>线程池相比较于多线程，更加具有智能化，说白了就是更加省心</p></blockquote><p>为什么要线程池 ?</p><ol><li>主线程中可以获取某一个线程的状态或者某一个任务的状态，以及返回值</li><li>当一个线程完成的时候我们主线程能立即知道</li><li><code>from concurrent.futures import Future</code>的futures和多进程编码接口一致</li></ol><p>最好自己改一下使用with上下文<code>with ThreadPoolExecutor(3) as executor:</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个个提交</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span>(<span class="params">times</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start sleep &#123;&#125;&quot;</span>.<span class="built_in">format</span>(times))</span><br><span class="line">    time.sleep(times)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;get page &#123;&#125; success&quot;</span>.<span class="built_in">format</span>(times))</span><br><span class="line">    <span class="keyword">return</span> times</span><br><span class="line"></span><br><span class="line">executor = ThreadPoolExecutor(max_workers=<span class="number">1</span>)</span><br><span class="line">task = executor.submit(get_html, <span class="number">3</span>)  <span class="comment"># submit 是立即返回</span></span><br><span class="line">task2 = executor.submit(get_html, <span class="number">2</span>)  <span class="comment"># submit 是立即返回</span></span><br><span class="line"><span class="built_in">print</span>(task.done())  <span class="comment"># 执行完成没</span></span><br><span class="line"><span class="built_in">print</span>(task2.cancel())  <span class="comment"># 因为总的线程为1 task2没有执行 所以可以取消</span></span><br><span class="line">time.sleep(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(task.done())</span><br><span class="line"><span class="built_in">print</span>(task.result())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量提交</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, as_completed, wait</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span>(<span class="params">times</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start sleep &#123;&#125;&quot;</span>.<span class="built_in">format</span>(times))</span><br><span class="line">    time.sleep(times)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;get page &#123;&#125; success&quot;</span>.<span class="built_in">format</span>(times))</span><br><span class="line">    <span class="keyword">return</span> times</span><br><span class="line"></span><br><span class="line">oneList = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br><span class="line">executor = ThreadPoolExecutor(max_workers=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># allTask = [executor.submit(get_html, each) for each in oneList]</span></span><br><span class="line"><span class="comment"># wait(allTask)  # 所有线程执行完毕再走</span></span><br><span class="line"><span class="comment"># # 一旦有完成的了就能获取到(谁先完成)</span></span><br><span class="line"><span class="comment"># for future in as_completed(allTask):  # 获取到已经完成的了</span></span><br><span class="line"><span class="comment">#     data = future.result()</span></span><br><span class="line"><span class="comment">#     print(&quot;! get &#123;&#125;&quot;.format(str(data)))</span></span><br><span class="line"><span class="comment"># 换个写法 (但是会按照oneList的顺序）</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> executor.<span class="built_in">map</span>(get_html, oneList):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;! get &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(data)))</span><br></pre></td></tr></table></figure><h2 id="多进程编程">多进程编程</h2><blockquote><ul><li><p>耗cpu的操作，用多进程编程，</p></li><li><p>对于io操作来说， 使用多线程编程</p></li><li><p>进程切换代价要高于线程</p></li></ul></blockquote><p>一般都是用多线程，多进程与多线程的库使用差不多～</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor, as_completed</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_sleep</span>(<span class="params">n</span>):</span></span><br><span class="line">    time.sleep(n)</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">with</span> ProcessPoolExecutor(<span class="number">3</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        all_task = [executor.submit(random_sleep, (num)) <span class="keyword">for</span> num <span class="keyword">in</span> [<span class="number">2</span>] * <span class="number">30</span>]</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        <span class="keyword">for</span> future <span class="keyword">in</span> as_completed(all_task):</span><br><span class="line">            data = future.result()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;exe result: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;last time is: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(time.time() - start_time))</span><br></pre></td></tr></table></figure><hr><ol><li>共享全局变量在多进程中是不使用的</li><li>multiprocessing中的queue不能用于pool进程池</li><li>pool中的进程间通信需要使用manager中的queue</li><li>使用Pipe通信，但是只能适用于2个进程</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue <span class="comment"># 多进程不能用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue <span class="comment"># 正常的多进程使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Manager <span class="comment"># pool里面使用</span></span><br><span class="line">Manager().Queue() </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pipe</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Go实现基础密码加密解密</title>
      <link href="/article/9f3d09de.html"/>
      <url>/article/9f3d09de.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言：-2">前言：</h2><p>自己没事查询资料弄了个Go加密解密的文件，方便在日常中直接调用</p><div class="note green icon flat"><i class="note-icon fas fa-bullhorn"></i><p>写这个是为了方便开新项目懒得去找现成的代码，直接复制过去做仓库文件<br>具体怎么用我也写了调用例子，即使不懂加密规则至少会用嘛～<br>至于具体的加密规则，建议网上(B站)搜搜《电子科技大学密码学》比较基础详细</p></div><h2 id="文件">文件</h2><p>包含 :</p><ul><li>AES-CBC</li><li>Base64/58</li><li>哈希</li><li>DES/3DES</li><li>RSA</li><li>数字签名</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> public</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;crypto&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/aes&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/cipher&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/des&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/md5&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/rand&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/rsa&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/sha256&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/x509&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/base64&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/pem&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;golang.org/x/crypto/md4&quot;</span></span><br><span class="line"><span class="string">&quot;math/big&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  ----------------------- AES-CBC -----------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CBCEncrypt</span><span class="params">(text []<span class="keyword">byte</span>, key []<span class="keyword">byte</span>, iv []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">block, err := aes.NewCipher(key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">padText := PKCS7Padding(text, block.BlockSize()) <span class="comment">// 填充</span></span><br><span class="line">blockMode := cipher.NewCBCEncrypter(block, iv)</span><br><span class="line">result := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(padText)) <span class="comment">// 加密</span></span><br><span class="line">blockMode.CryptBlocks(result, padText)</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CBCDecrypt</span><span class="params">(encrypt []<span class="keyword">byte</span>, key []<span class="keyword">byte</span>, iv []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">block, err := aes.NewCipher(key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">blockMode := cipher.NewCBCDecrypter(block, iv)</span><br><span class="line">result := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(encrypt))</span><br><span class="line">blockMode.CryptBlocks(result, encrypt)</span><br><span class="line"><span class="comment">// 去除填充</span></span><br><span class="line">result = UnPKCS7Padding(result)</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PKCS7Padding 计算待填充的长度</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PKCS7Padding</span><span class="params">(text []<span class="keyword">byte</span>, blockSize <span class="keyword">int</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">padding := blockSize - <span class="built_in">len</span>(text)%blockSize</span><br><span class="line"><span class="keyword">var</span> paddingText []<span class="keyword">byte</span></span><br><span class="line"><span class="keyword">if</span> padding == <span class="number">0</span> &#123;</span><br><span class="line">paddingText = bytes.Repeat([]<span class="keyword">byte</span>&#123;<span class="keyword">byte</span>(blockSize)&#125;, blockSize) <span class="comment">// 已对齐，填充一整块数据，每个数据为 blockSize</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">paddingText = bytes.Repeat([]<span class="keyword">byte</span>&#123;<span class="keyword">byte</span>(padding)&#125;, padding) <span class="comment">// 未对齐 填充 padding 个数据，每个数据为 padding</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">append</span>(text, paddingText...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UnPKCS7Padding 取出填充的数据 以此来获得填充数据长度</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UnPKCS7Padding</span><span class="params">(text []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">unPadding := <span class="keyword">int</span>(text[<span class="built_in">len</span>(text)<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">return</span> text[:(<span class="built_in">len</span>(text) - unPadding)]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  ----------------------- BASE64 -----------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Base64Encoding</span><span class="params">(input []<span class="keyword">byte</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> base64.StdEncoding.EncodeToString(input)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Base64Decoding</span><span class="params">(encodeString <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">decodeBytes, err := base64.StdEncoding.DecodeString(encodeString)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(decodeBytes)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Base64UrlEncoding</span><span class="params">(input []<span class="keyword">byte</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> base64.URLEncoding.EncodeToString(input)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Base64UrlDecoding</span><span class="params">(encodeUrl <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">uDec, err := base64.URLEncoding.DecodeString(encodeUrl)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(uDec)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  ----------------------- BASE58 -----------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b58 = []<span class="keyword">byte</span>(<span class="string">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Base58Encoding base58编码</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Base58Encoding</span><span class="params">(src <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">srcByte := []<span class="keyword">byte</span>(src)</span><br><span class="line"><span class="comment">// todo 转成十进制</span></span><br><span class="line">i := big.NewInt(<span class="number">0</span>).SetBytes(srcByte)</span><br><span class="line"><span class="comment">// todo 循环取余</span></span><br><span class="line"><span class="keyword">var</span> modSlice []<span class="keyword">byte</span></span><br><span class="line"><span class="keyword">for</span> i.Cmp(big.NewInt(<span class="number">0</span>)) &gt; <span class="number">0</span> &#123;</span><br><span class="line">mod := big.NewInt(<span class="number">0</span>)</span><br><span class="line">i58 := big.NewInt(<span class="number">58</span>)</span><br><span class="line">i.DivMod(i, i58, mod)                         <span class="comment">// 取余</span></span><br><span class="line">modSlice = <span class="built_in">append</span>(modSlice, b58[mod.Int64()]) <span class="comment">// 将余数添加到数组中</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// todo 把0使用字节&#x27;1&#x27;代替</span></span><br><span class="line"><span class="keyword">for</span> _, s := <span class="keyword">range</span> srcByte &#123;</span><br><span class="line"><span class="keyword">if</span> s != <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">modSlice = <span class="built_in">append</span>(modSlice, <span class="keyword">byte</span>(<span class="string">&#x27;1&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// todo 反转byte数组</span></span><br><span class="line">retModSlice := ReverseByteArr(modSlice)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(retModSlice)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Base58Decoding base58解码</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Base58Decoding</span><span class="params">(src <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="comment">// 转成byte数组</span></span><br><span class="line">srcByte := []<span class="keyword">byte</span>(src)</span><br><span class="line"><span class="comment">// 这里得到的是十进制</span></span><br><span class="line">ret := big.NewInt(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> _, b := <span class="keyword">range</span> srcByte &#123;</span><br><span class="line">i := bytes.IndexByte(b58, b)</span><br><span class="line">ret.Mul(ret, big.NewInt(<span class="number">58</span>))       <span class="comment">// 乘回去</span></span><br><span class="line">ret.Add(ret, big.NewInt(<span class="keyword">int64</span>(i))) <span class="comment">// 相加</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(ret.Bytes())</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReverseByteArr byte数组进行反转方式2</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReverseByteArr</span><span class="params">(b []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="built_in">len</span>(b)<span class="number">-1</span>; i &lt; j; i, j = i+<span class="number">1</span>, j<span class="number">-1</span> &#123;</span><br><span class="line">b[i], b[j] = b[j], b[i]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  ----------------------- 哈希算法 -----------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// HashMD4Encoding MD4哈希加密</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HashMD4Encoding</span><span class="params">(src <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">srcByte := []<span class="keyword">byte</span>(src)</span><br><span class="line">md4New := md4.New()</span><br><span class="line">md4Bytes := md4New.Sum(srcByte)</span><br><span class="line"><span class="keyword">return</span> hex.EncodeToString(md4Bytes)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HashMD5Encoding MD5哈希加密</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HashMD5Encoding</span><span class="params">(src <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">srcByte := []<span class="keyword">byte</span>(src)</span><br><span class="line">md5New := md5.New()</span><br><span class="line">md5Bytes := md5New.Sum(srcByte)</span><br><span class="line"><span class="keyword">return</span> hex.EncodeToString(md5Bytes)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HashSHA256Encoding SHA256哈希加密</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HashSHA256Encoding</span><span class="params">(src <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">sha256Bytes := sha256.Sum256([]<span class="keyword">byte</span>(src))</span><br><span class="line"><span class="keyword">return</span> hex.EncodeToString(sha256Bytes[:])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  ----------------------- DES -----------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DesEncoding 加密</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DesEncoding</span><span class="params">(src <span class="keyword">string</span>, desKey []<span class="keyword">byte</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// todo desKey只支持8字节的长度</span></span><br><span class="line">srcByte := []<span class="keyword">byte</span>(src)</span><br><span class="line">block, err := des.NewCipher(desKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> src, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// todo 密码填充</span></span><br><span class="line">newSrcByte := PadPwd(srcByte, block.BlockSize())</span><br><span class="line">dst := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(newSrcByte))</span><br><span class="line">block.Encrypt(dst, newSrcByte)</span><br><span class="line"><span class="comment">// todo base64编码</span></span><br><span class="line">pwd := base64.StdEncoding.EncodeToString(dst)</span><br><span class="line"><span class="keyword">return</span> pwd, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DesDecoding 解密</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DesDecoding</span><span class="params">(pwd <span class="keyword">string</span>, desKey []<span class="keyword">byte</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">pwdByte, err := base64.StdEncoding.DecodeString(pwd)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> pwd, err</span><br><span class="line">&#125;</span><br><span class="line">block, errBlock := des.NewCipher(desKey)</span><br><span class="line"><span class="keyword">if</span> errBlock != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> pwd, errBlock</span><br><span class="line">&#125;</span><br><span class="line">dst := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(pwdByte))</span><br><span class="line">block.Decrypt(dst, pwdByte)</span><br><span class="line">dst, _ = UnPadPwd(dst)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(dst), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PadPwd 填充密码长度</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PadPwd</span><span class="params">(srcByte []<span class="keyword">byte</span>, blockSize <span class="keyword">int</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">padNum := blockSize - <span class="built_in">len</span>(srcByte)%blockSize</span><br><span class="line">ret := bytes.Repeat([]<span class="keyword">byte</span>&#123;<span class="keyword">byte</span>(padNum)&#125;, padNum)</span><br><span class="line">srcByte = <span class="built_in">append</span>(srcByte, ret...)</span><br><span class="line"><span class="keyword">return</span> srcByte</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UnPadPwd 去掉填充的部分</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UnPadPwd</span><span class="params">(dst []<span class="keyword">byte</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(dst) &lt;= <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> dst, errors.New(<span class="string">&quot;长度有误&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">unPadNum := <span class="keyword">int</span>(dst[<span class="built_in">len</span>(dst)<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">return</span> dst[:(<span class="built_in">len</span>(dst) - unPadNum)], <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  ----------------------- 3DES-CBC -----------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TDesEncoding 3des加密</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TDesEncoding</span><span class="params">(src <span class="keyword">string</span>, desKey []<span class="keyword">byte</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// todo key 24位数</span></span><br><span class="line">srcByte := []<span class="keyword">byte</span>(src)</span><br><span class="line">block, err := des.NewTripleDESCipher(desKey) <span class="comment">// 和des的区别</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> src, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// todo 密码填充</span></span><br><span class="line">newSrcByte := PadPwd(srcByte, block.BlockSize())</span><br><span class="line">dst := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(newSrcByte))</span><br><span class="line">block.Encrypt(dst, newSrcByte)</span><br><span class="line"><span class="comment">// todo base64编码</span></span><br><span class="line">pwd := base64.StdEncoding.EncodeToString(dst)</span><br><span class="line"><span class="keyword">return</span> pwd, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TDesDecoding 3des解密</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TDesDecoding</span><span class="params">(pwd <span class="keyword">string</span>, desKey []<span class="keyword">byte</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">pwdByte, err := base64.StdEncoding.DecodeString(pwd)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> pwd, err</span><br><span class="line">&#125;</span><br><span class="line">block, errBlock := des.NewTripleDESCipher(desKey) <span class="comment">// 和des的区别</span></span><br><span class="line"><span class="keyword">if</span> errBlock != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> pwd, errBlock</span><br><span class="line">&#125;</span><br><span class="line">dst := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(pwdByte))</span><br><span class="line">block.Decrypt(dst, pwdByte)</span><br><span class="line">dst, _ = UnPadPwd(dst)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(dst), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  ----------------------- RSA -----------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// SaveRsaKey 生成Rsa公钥私钥并保存</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SaveRsaKey</span><span class="params">(bits <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// todo 处理钥匙</span></span><br><span class="line">privateKey, err := rsa.GenerateKey(rand.Reader, bits)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">publicKey := privateKey.PublicKey</span><br><span class="line">x509Private := x509.MarshalPKCS1PrivateKey(privateKey)             <span class="comment">// 使用x509标准对私钥进行编码，AsN.1编码字符串</span></span><br><span class="line">x509Public := x509.MarshalPKCS1PublicKey(&amp;publicKey)               <span class="comment">// 使用x509标准对公钥进行编码，AsN.1编码字符串</span></span><br><span class="line">blockPrivate := pem.Block&#123;Type: <span class="string">&quot;private key&quot;</span>, Bytes: x509Private&#125; <span class="comment">// 对私钥封装block 结构数据</span></span><br><span class="line">blockPublic := pem.Block&#123;Type: <span class="string">&quot;public key&quot;</span>, Bytes: x509Public&#125;    <span class="comment">// 对公钥封装block 结构数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// todo 创建存放私钥的文件</span></span><br><span class="line">privateFile, errPri := os.Create(<span class="string">&quot;privateKey.pem&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> errPri != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errPri</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> privateFile.Close()</span><br><span class="line">pem.Encode(privateFile, &amp;blockPrivate)</span><br><span class="line"><span class="comment">// todo 创建存放公钥的文件</span></span><br><span class="line">publicFile, errPub := os.Create(<span class="string">&quot;publicKey.pem&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> errPub != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errPub</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> publicFile.Close()</span><br><span class="line">pem.Encode(publicFile, &amp;blockPublic)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RsaEncoding 加密</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RsaEncoding</span><span class="params">(src, filePath <span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">srcByte := []<span class="keyword">byte</span>(src)</span><br><span class="line"><span class="comment">// todo 打开文件</span></span><br><span class="line">file, err := os.Open(filePath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> srcByte, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// todo 获取文件信息</span></span><br><span class="line">fileInfo, errInfo := file.Stat()</span><br><span class="line"><span class="keyword">if</span> errInfo != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> srcByte, errInfo</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// todo 读取文件内容</span></span><br><span class="line">keyBytes := <span class="built_in">make</span>([]<span class="keyword">byte</span>, fileInfo.Size())</span><br><span class="line">file.Read(keyBytes)                                       <span class="comment">// 读取内容到容器里面</span></span><br><span class="line">block, _ := pem.Decode(keyBytes)                          <span class="comment">// pem解码</span></span><br><span class="line">publicKey, errPb := x509.ParsePKCS1PublicKey(block.Bytes) <span class="comment">// x509解码</span></span><br><span class="line"><span class="keyword">if</span> errPb != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> srcByte, errPb</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// todo 使用公钥对明文进行加密</span></span><br><span class="line">retByte, errRet := rsa.EncryptPKCS1v15(rand.Reader, publicKey, srcByte)</span><br><span class="line"><span class="keyword">if</span> errRet != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> srcByte, errRet</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> retByte, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RsaDecoding 解密</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RsaDecoding</span><span class="params">(srcByte []<span class="keyword">byte</span>, filePath <span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// todo 打开文件</span></span><br><span class="line">file, err := os.Open(filePath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> srcByte, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// todo 获取文件信息</span></span><br><span class="line">fileInfo, errInfo := file.Stat()</span><br><span class="line"><span class="keyword">if</span> errInfo != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> srcByte, errInfo</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// todo 读取文件内容</span></span><br><span class="line">keyBytes := <span class="built_in">make</span>([]<span class="keyword">byte</span>, fileInfo.Size())</span><br><span class="line"><span class="comment">// 读取内容到容器里面</span></span><br><span class="line">file.Read(keyBytes)</span><br><span class="line">block, _ := pem.Decode(keyBytes)                            <span class="comment">// pem解码</span></span><br><span class="line">privateKey, errPb := x509.ParsePKCS1PrivateKey(block.Bytes) <span class="comment">// x509解码</span></span><br><span class="line"><span class="keyword">if</span> errPb != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> srcByte, errPb</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// todo 进行解密</span></span><br><span class="line">retByte, errRet := rsa.DecryptPKCS1v15(rand.Reader, privateKey, srcByte)</span><br><span class="line"><span class="keyword">if</span> errRet != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> srcByte, errRet</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> retByte, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  ----------------------- 数字签名 -----------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetPrivateKey</span><span class="params">(filePath <span class="keyword">string</span>)</span> <span class="params">(*rsa.PrivateKey, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// todo 打开文件</span></span><br><span class="line">file, err := os.Open(filePath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;rsa.PrivateKey&#123;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// todo 获取文件信息</span></span><br><span class="line">fileInfo, errInfo := file.Stat()</span><br><span class="line"><span class="keyword">if</span> errInfo != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;rsa.PrivateKey&#123;&#125;, errInfo</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// todo 读取文件内容</span></span><br><span class="line">keyBytes := <span class="built_in">make</span>([]<span class="keyword">byte</span>, fileInfo.Size())</span><br><span class="line">file.Read(keyBytes)                                         <span class="comment">// 读取内容到容器里面</span></span><br><span class="line">block, _ := pem.Decode(keyBytes)                            <span class="comment">// pem解码</span></span><br><span class="line">PrivateKey, errPb := x509.ParsePKCS1PrivateKey(block.Bytes) <span class="comment">// x509解码</span></span><br><span class="line"><span class="keyword">if</span> errPb != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;rsa.PrivateKey&#123;&#125;, errPb</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> PrivateKey, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetPublicKey</span><span class="params">(filePath <span class="keyword">string</span>)</span> <span class="params">(*rsa.PublicKey, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// todo 打开文件</span></span><br><span class="line">file, err := os.Open(filePath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;rsa.PublicKey&#123;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// todo 获取文件信息</span></span><br><span class="line">fileInfo, errInfo := file.Stat()</span><br><span class="line"><span class="keyword">if</span> errInfo != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;rsa.PublicKey&#123;&#125;, errInfo</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// todo 读取文件内容</span></span><br><span class="line">keyBytes := <span class="built_in">make</span>([]<span class="keyword">byte</span>, fileInfo.Size())</span><br><span class="line">file.Read(keyBytes)                                       <span class="comment">// 读取内容到容器里面</span></span><br><span class="line">block, _ := pem.Decode(keyBytes)                          <span class="comment">// pem解码</span></span><br><span class="line">publicKey, errPb := x509.ParsePKCS1PublicKey(block.Bytes) <span class="comment">// x509解码</span></span><br><span class="line"><span class="keyword">if</span> errPb != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;rsa.PublicKey&#123;&#125;, errPb</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> publicKey, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RsaSign 数字签名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RsaSign</span><span class="params">(filePath <span class="keyword">string</span>, src <span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// todo 获取私钥</span></span><br><span class="line">private, err := GetPrivateKey(filePath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">byte</span>&#123;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// todo 签名</span></span><br><span class="line">shaNew := sha256.New()</span><br><span class="line">srcByte := []<span class="keyword">byte</span>(src)</span><br><span class="line">shaNew.Write(srcByte)</span><br><span class="line">shaByte := shaNew.Sum(<span class="literal">nil</span>)</span><br><span class="line">v15, err := rsa.SignPKCS1v15(rand.Reader, private, crypto.SHA256, shaByte)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">byte</span>&#123;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> v15, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RsaVerify 验证签名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RsaVerify</span><span class="params">(sign []<span class="keyword">byte</span>, src <span class="keyword">string</span>, filePath <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// todo 拿到公钥</span></span><br><span class="line">public, err := GetPublicKey(filePath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// todo 验证签名</span></span><br><span class="line">shaNew := sha256.New()</span><br><span class="line">srcByte := []<span class="keyword">byte</span>(src)</span><br><span class="line">shaNew.Write(srcByte)</span><br><span class="line">shaByte := shaNew.Sum(<span class="literal">nil</span>)</span><br><span class="line">err = rsa.VerifyPKCS1v15(public, crypto.SHA256, shaByte, sign)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码实现">代码实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;GoBackEnd/public&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// AES-CBC</span></span><br><span class="line">iv := []<span class="keyword">byte</span>&#123;<span class="number">0x19</span>, <span class="number">0x34</span>, <span class="number">0x57</span>, <span class="number">0x72</span>, <span class="number">0x90</span>, <span class="number">0xAB</span>, <span class="number">0xCD</span>, <span class="number">0xEF</span>, <span class="number">0x12</span>, <span class="number">0x64</span>, <span class="number">0x14</span>, <span class="number">0x78</span>, <span class="number">0x90</span>, <span class="number">0xAC</span>, <span class="number">0xAE</span>, <span class="number">0x45</span>&#125;</span><br><span class="line">key := []<span class="keyword">byte</span>(<span class="string">&quot;1111111111111111&quot;</span>)</span><br><span class="line">AesCbc := public.CBCEncrypt([]<span class="keyword">byte</span>(<span class="string">&quot;hello&quot;</span>), key, iv)</span><br><span class="line">fmt.Println(AesCbc)</span><br><span class="line">content := public.CBCDecrypt(AesCbc, key, iv)</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(content))</span><br><span class="line"><span class="comment">// BASE64</span></span><br><span class="line">encode := public.Base64Encoding([]<span class="keyword">byte</span>(<span class="string">&quot;Hello&quot;</span>))</span><br><span class="line">fmt.Println(encode)</span><br><span class="line">decode := public.Base64Decoding(encode)</span><br><span class="line">fmt.Println(decode)</span><br><span class="line"><span class="comment">// BASE58</span></span><br><span class="line">encode = public.Base58Encoding(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">fmt.Println(encode)</span><br><span class="line">decode = public.Base58Decoding(encode)</span><br><span class="line">fmt.Println(decode)</span><br><span class="line"><span class="comment">// 哈希算法</span></span><br><span class="line">md4 := public.HashMD4Encoding(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">fmt.Println(md4)</span><br><span class="line">md5 := public.HashMD5Encoding(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">fmt.Println(md5)</span><br><span class="line">sha := public.HashSHA256Encoding(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">fmt.Println(sha)</span><br><span class="line"><span class="comment">// DES</span></span><br><span class="line">encode, _ = public.DesEncoding(<span class="string">&quot;hello&quot;</span>, []<span class="keyword">byte</span>(<span class="string">&quot;11111111&quot;</span>)) <span class="comment">// 8位数</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Des:&quot;</span>, encode)</span><br><span class="line">decode, _ = public.DesDecoding(encode, []<span class="keyword">byte</span>(<span class="string">&quot;11111111&quot;</span>))</span><br><span class="line">fmt.Println(<span class="string">&quot;Des:&quot;</span>, decode)</span><br><span class="line">encode, _ = public.TDesEncoding(<span class="string">&quot;hello&quot;</span>, []<span class="keyword">byte</span>(<span class="string">&quot;111111111111111111111111&quot;</span>)) <span class="comment">// 24位数</span></span><br><span class="line">fmt.Println(encode)</span><br><span class="line">decode, _ = public.TDesDecoding(encode, []<span class="keyword">byte</span>(<span class="string">&quot;111111111111111111111111&quot;</span>))</span><br><span class="line">fmt.Println(decode)</span><br><span class="line"><span class="comment">// RSA</span></span><br><span class="line">err := public.SaveRsaKey(<span class="number">2048</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">encoding, _ := public.RsaEncoding(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;publicKey.pem&quot;</span>)</span><br><span class="line">log.Println(public.Base64Encoding(encoding))</span><br><span class="line">decoding, _ := public.RsaDecoding(encoding, <span class="string">&quot;privateKey.pem&quot;</span>)</span><br><span class="line">log.Println(<span class="keyword">string</span>(decoding))</span><br><span class="line"><span class="comment">// 数字签名</span></span><br><span class="line">encoding, _ = public.RsaSign(<span class="string">&quot;privateKey.pem&quot;</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line">log.Println(encoding)</span><br><span class="line">isTrue, _ := public.RsaVerify(encoding, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;publicKey.pem&quot;</span>)</span><br><span class="line">log.Println(isTrue)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu纯命令行走Clash终端代理(Linux同理)</title>
      <link href="/article/3dadfa74.html"/>
      <url>/article/3dadfa74.html</url>
      
        <content type="html"><![CDATA[<h2 id="Ubuntu纯命令行走Clash代理-Linux同理">Ubuntu纯命令行走Clash代理(Linux同理)</h2><div class="note green icon flat"><i class="note-icon fas fa-bullhorn"></i><p>广告 ：<a href="https://hengy1.top/article/567e1422.html">https://hengy1.top/article/567e1422.html</a></p></div><h2 id="布置环境">布置环境</h2><p>到 <a href="https://github.com/Dreamacro/clash/releases">https://github.com/Dreamacro/clash/releases</a> 找到最新版本</p><blockquote><p>这里吐槽下：可能一直拉不下来，手动下载然后ftp传上来</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建环境</span></span><br><span class="line">$ mkdir clash</span><br><span class="line">$ <span class="built_in">cd</span> clash</span><br><span class="line"><span class="comment"># 拉取下来</span></span><br><span class="line">$ wget https://github.com/Dreamacro/clash/releases/download/v1.9.0/clash-linux-amd64-v1.9.0.gz</span><br><span class="line">$ gzip -d clash-linux-amd64-v1.9.0.gz</span><br><span class="line">$ mv clash-linux-amd64-v1.9.0.gz clash</span><br><span class="line"><span class="comment"># 这里clash为二进制可以运行文件了</span></span><br><span class="line">$ chomd 755 clash</span><br></pre></td></tr></table></figure><h2 id="传入配置">传入配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成默认配置</span></span><br><span class="line">$ ./clash -d .  <span class="comment"># 默认配置</span></span><br><span class="line"><span class="comment"># 拉取机场配置</span></span><br><span class="line">$ wget xxxx <span class="comment"># 要么拉下来 要么自己拷贝上来</span></span><br><span class="line"><span class="comment"># 注意： 名称为：config.yaml</span></span><br><span class="line">$ ./clash -d . <span class="comment"># 就开始加载你的配置了</span></span><br></pre></td></tr></table></figure><img src="/img/mics/image-20220222194004626.webp" alt="image-20220222194004626" style="zoom:85%;" /><h2 id="日常使用">日常使用</h2><p>你会发现这个已取消就失效了，下面我们添加到后台(建议为root用户)</p><ol><li><code>vim ~/..bashrc  </code>开始准备命令并把下面的写进入</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> clash_start=<span class="string">&quot;screen -S clash /home/xxx/clash/clash -d /home/xxx/clash/&quot;</span></span><br><span class="line"><span class="built_in">alias</span> clash_stop=<span class="string">&quot;pkill clash&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> proxy_on=<span class="string">&quot;export https_proxy=127.0.0.1:7890 &amp;&amp; export http_proxy=127.0.0.1:7890&quot;</span></span><br><span class="line"><span class="built_in">alias</span> proxy_off=<span class="string">&quot;unset http_proxy https_proxy&quot;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>source ~/..bashrc </code> 重新载入</li><li><code>clash_start</code>会进入screen 按 <code>ctrl + a + d</code>退出后台</li><li><code>proxy_on</code>开启代理</li><li><code>curl https://www.youtube.com/</code>会发现马上返回结果</li></ol><h2 id="github加速">github加速</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global http.proxy <span class="string">&#x27;http://127.0.0.1:7890&#x27;</span></span><br><span class="line">$ git config --global https.proxy <span class="string">&#x27;https://127.0.0.1:7890&#x27;</span></span><br></pre></td></tr></table></figure><div class="note pink icon flat"><i class="note-icon fas fa-car-crash"></i><p>恭喜：速度起来了！<br>科学上网，规范行使。</p></div>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常中的Git怎么使用</title>
      <link href="/article/e996634a.html"/>
      <url>/article/e996634a.html</url>
      
        <content type="html"><![CDATA[<hr><h2 id="日常中的Git怎么使用">日常中的Git怎么使用</h2><p><code>git</code>是真的香呀，主要是好管理，用着方便。</p><p>我的git学习路程就是：学了 -&gt; desktop点点点 -&gt; 三剑客 -&gt; 敲击命令</p><p>说白就是不知道各种情况不知道怎么办？</p><p>然后今天就简单总结下几种情况。</p><h2 id="情景再现：">情景再现：</h2><ol><li>我创建了远程仓库，我本地已经有代码了，如何将本地的加入到仓库里面</li><li>为别人仓库提交Pr，参与别人的项目。</li><li>我创建了仓库，拉下来自己改了，别人在我之前上传了代码，我怎么上传</li><li>创建了主线分支与支线分支，支线开发合并到主线</li><li>一些基础命令，账号设置。</li></ol><div class="note green icon flat"><i class="note-icon fas fa-bullhorn"></i><p>在这里我准备了2个账号来模拟下。分别用台式和笔记本设置了全局账号</p><p>至于终端怎么加速 点击右侧👉 ：<a href="https://hengy1.top/article/567e1422.html">https://hengy1.top/article/567e1422.html</a></p></div><h2 id="情境一：">情境一：</h2><blockquote><p>我创建了远程仓库，我本地已经有代码了，如何将本地的加入到仓库里面</p></blockquote><p>一般创建好了会有<code>LICENSE</code>与<code>README</code>，然后本地已经有了文件。</p><img src="/img/mics/image-20220220222648642.webp" alt="远程仓库" style="zoom:67%;" /><img src="/img/mics/image-20220220222956379.webp" alt="本地存在文件了" style="zoom:67%;" /><p>下面步骤与注释我都写在里面了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化init环境</span></span><br><span class="line">$ git init</span><br><span class="line"><span class="comment"># 切换到main分支 因为现在git的默认分支是main了</span></span><br><span class="line">$ git checkout -b main</span><br><span class="line"><span class="comment"># 添加远程地址 originName自己取</span></span><br><span class="line">$ git remote add originName git@github.com:HengY1Sky/gitTry.git</span><br><span class="line"><span class="comment"># 查看下远程</span></span><br><span class="line">$ git remote -v</span><br><span class="line"><span class="comment"># 把远程的拿来下然后与本地的合到一起</span></span><br><span class="line">$ git pull originName main</span><br><span class="line"><span class="comment"># 查看效果</span></span><br><span class="line">$ ls -l</span><br><span class="line"><span class="comment"># 添加到工作区</span></span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">&quot;init&quot;</span></span><br><span class="line"><span class="comment"># 提交 </span></span><br><span class="line">$ git push --set-upstream originName main</span><br></pre></td></tr></table></figure><img src="/img/mics/image-20220220224029970.webp" alt="" style="zoom:67%;" /><h2 id="情境二：">情境二：</h2><blockquote><p>为别人仓库提交Pr，参与别人的项目。</p></blockquote><p>这个是分情况的：</p><p>如果你有这个仓库权限，即你是成员：直接拉下来提交就行了</p><p>如果是别人的仓库，你得先自己fork个，拥有权限再动。</p><img src="/img/mics/image-20220220224632928.webp" alt="" style="zoom:67%;" /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从自己fork的拿下来将文件命名为git</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/HengY1Sky/gitTest.git git </span><br><span class="line">$ <span class="built_in">cd</span> git</span><br><span class="line"><span class="comment"># 创建分支</span></span><br><span class="line"><span class="comment"># 为什么加分支？因为主分支防止别人仓库更新了</span></span><br><span class="line">$ git checkout -b change</span><br><span class="line"><span class="comment"># 开始自己加东西</span></span><br><span class="line">$ ....</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">&quot;add hello.txt&quot;</span></span><br><span class="line"><span class="comment"># 提交到远程</span></span><br><span class="line">$ git push --set-upstream origin change</span><br></pre></td></tr></table></figure><img src="/img/mics/image-20220220225547672.webp" alt="" style="zoom:67%;" /><img src="/img/mics/image-20220220225637580.webp" alt="" style="zoom:67%;" /><p><code>你的仓库：分支</code> -&gt;<code>对方的仓库/分支</code>，然后加上你的描述，对方接受会给你发邮件，你们可以交流交流了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当然别人仓库可以更新的</span></span><br><span class="line">$ git branch</span><br><span class="line">$ git checkout main</span><br><span class="line">$ git remote add upstream https://github.com/HengY1Sky/gitTest.git</span><br><span class="line"><span class="comment"># 将别人的最新分支更新到你的本地main分支上</span></span><br><span class="line">$ git pull upstream main</span><br></pre></td></tr></table></figure><h2 id="情境三：">情境三：</h2><blockquote><p>我创建了仓库，拉下来自己改了，别人在我之前上传了代码，我怎么上传</p></blockquote><p>这里我直接在Github上改一下相当于别人改了</p><img src="/img/mics/image-20220220230237186.webp" alt="" style="zoom:67%;" /><p>然后我在本地不知道，继续更改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">&quot;make change&quot;</span></span><br><span class="line">$ git push <span class="comment"># 会被拒绝</span></span><br></pre></td></tr></table></figure><img src="/img/mics/image-20220220230441903.webp" alt="" style="zoom:67%;" /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取并合并</span></span><br><span class="line">$ git pull</span><br><span class="line"><span class="comment"># 手动解决冲突</span></span><br><span class="line">$ vim index.txt</span><br></pre></td></tr></table></figure><img src="/img/mics/image-20220220230555258.webp" alt="" style="zoom:67%;" /><img src="/img/mics/image-20220220230613363.webp" alt="" style="zoom:67%;" /><p>留下你想要的，其他删除干净。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">&quot;final&quot;</span></span><br><span class="line">$ git push <span class="comment"># 搞定</span></span><br></pre></td></tr></table></figure><h2 id="情境四：">情境四：</h2><blockquote><p>创建了主线分支与支线分支，支线开发合并到主线</p></blockquote><p>这个可以两种:</p><ol><li>本地两个分支，在主分支合并好了，然后更新远端主分支</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看本地分支</span></span><br><span class="line">$ git branch </span><br><span class="line"><span class="comment"># 创建副分支</span></span><br><span class="line">$ git checkout -b other</span><br><span class="line"><span class="comment"># 删除主分支内容加上自己新的内通</span></span><br><span class="line">$ vim index.txt</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">&quot;new&quot;</span></span><br><span class="line"><span class="comment"># 切换回主分支</span></span><br><span class="line">$ git checkout main</span><br><span class="line"><span class="comment"># 合并分支</span></span><br><span class="line">$ git merge other</span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure><ol start="2"><li>两个分支都上传到远端，然后在github上图形化合并到主线(通常是团队)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout ohter</span><br><span class="line">$ vim index.txt</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">&quot;other&quot;</span></span><br><span class="line">$ git push --set-upstream originName other</span><br></pre></td></tr></table></figure><img src="/img/mics/image-20220220232640656.webp" alt="" style="zoom:67%;" /><img src="/img/mics/image-20220220232704906.webp" alt="" style="zoom:67%;" /><p>正常提交，手动解决冲突保存想要的</p><img src="/img/mics/image-20220220232741088.webp" alt="" style="zoom:67%;" /><img src="/img/mics/image-20220220232816828.webp" alt="手动解决冲突" style="zoom:67%;" /><p>然后一路点点点就好了，通常主线是技术组长，组员在分支提交，组长审核合并到主线。</p><h2 id="基础命令，账号设置">基础命令，账号设置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&#x27;&#x27;</span></span><br><span class="line">$ git config --global user.email <span class="string">&#x27;&#x27;</span></span><br><span class="line">$ git config --list --global  <span class="comment"># 提交的时候会知道是你提交的以及会联系你</span></span><br><span class="line"></span><br><span class="line">$ git status <span class="comment"># 查看状况</span></span><br><span class="line">$ git <span class="built_in">log</span> <span class="comment"># 查看日志</span></span><br><span class="line">$ git tag -a v1.2 xxx -m <span class="string">&quot;my tag&quot;</span> <span class="comment"># 给xxx打上标签与描述</span></span><br><span class="line"></span><br><span class="line">$ git branch -v <span class="comment"># 查看分支</span></span><br><span class="line">$ git checkout -b temp d96e27d54e4aaa79e0ccc76e1023b3d489a9aced <span class="comment"># 创建一个叫做temp的从d96e27d54e开始的分支</span></span><br><span class="line">$ git checkout master <span class="comment"># 切换分支</span></span><br><span class="line"></span><br><span class="line">$ git diff xxx xxx <span class="comment"># 两者进行比较</span></span><br><span class="line">$ git diff HEAD HEAD^1^1 <span class="comment"># 与爷爷进行比较</span></span><br><span class="line">$ git diff temp master -- readme.md <span class="comment"># 当前temp分支与master进行比较</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个人可以根据新的分支自己在本地创建分支来编辑-》 更新 -》 上传 -》 提交</span></span><br><span class="line">$ git fetch gitTest <span class="comment"># 将别人提交的分支也拉下来</span></span><br><span class="line">$ git fetch gitTest <span class="comment"># 在编辑完后如果还有人编辑了而你即将提交了就要fetch</span></span><br><span class="line">$ git merge gitTest/master <span class="comment"># 没有冲突智能合并/有冲突要改</span></span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure><p>现在没有账号登陆了然后要配置公钥 <a href="https://docs.github.com/cn">https://docs.github.com/cn</a></p><p>网上教程一大堆，随便搜搜</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker日常究竟要怎么用</title>
      <link href="/article/86cd1cda.html"/>
      <url>/article/86cd1cda.html</url>
      
        <content type="html"><![CDATA[<h2 id="Docker日常究竟要怎么用">Docker日常究竟要怎么用</h2><p>最近在考C4认证，结果模拟卡在了Docker部署。我真的十分无语😓</p><p>我在Windows上面编辑的，踩了好多坑，耗了很多时间。</p><p>趁着下周考试前来写一下Docker在日常只能够究竟要怎么用：</p><div class="note green icon flat"><i class="note-icon fas fa-bullhorn"></i><p>本文首发于博客，观感更好 :)</p><p>我的Docker自学笔记 ：<a href="https://blog.csdn.net/weixin_51485807/article/details/122517156">CSDN博客，求个赞～</a></p></div><h2 id="你能收获什么">你能收获什么</h2><p>下面这4项，除了玩复杂网络的，基本够了。</p><p>我把从本地 = &gt; 云上 =&gt; 别的地方 都串通了</p><ul><li>DockerFile使用</li><li>Docker上传仓库</li><li>docker-compose的编写与部署</li><li>常用命令</li></ul><h2 id="更新">更新</h2><div class="note red icon flat"><i class="note-icon fas fa-bullhorn"></i><p>重新写了下DockerFile与docker-compose的文件<br>找到了相比较depends_on等待Mysql打通再链接的脚本<br>这个很好的解决了 <a class="btn-beautify " href="https://github.com/Eficode/wait-for"   title="点击查看"><i class="far fa-hand-point-right"></i><span>点击查看</span></a></p></div><h2 id="DockerFile使用">DockerFile使用</h2><p>这个是干嘛的？ 简单来说就是你在本地写好了文件，然后写个DockerFile来打造你的专属Docker容器</p><p>也就是<code>Centos</code>上造个<code>Ubuntu</code>的感觉。我拿我的一个项目案例来说下。</p><p>首先呢创建一个<code>Dockerfile</code>文件，对！名字都是死的，当然你用<code>-f</code>也是行的，但是我懒得搞路径</p><p>其次呢，类似于 <code>.gitignore</code>你也要搞个<code>.dockerignore</code>这样就“加速”了，具体原因谷歌下。</p><p>好了到现在为止：开始写DockerFile 然后 命令参数到处都是 <a href="https://jiajially.gitbooks.io/dockerguide/content/chapter_fastlearn/dockerfile_details.html">随便放个在这里</a></p><p>对了你在打包前记得<strong>开启docker服务</strong>哈～</p><p>下面是我的目录👇 目标是打包个Flask</p><img src="/img/mics/image-20220219231439092.webp" alt="这是我的目录" style="zoom:80%;" /><p>这里有几个天坑！</p><ol><li><code>COPY</code> 过去的话<strong>文件</strong>就会自己创建相同名字，<strong>文件夹</strong>的话必须写一遍</li><li><code>PYTHONPATH</code>必须指定，不然的话就会说找不到Python模块，贼麻烦</li><li><code>RUN</code>尽量写一起，少建立层数，减小内存</li><li><code>CMD</code>的写法也要注意⚠️，不然只会执行最后一个</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>.<span class="number">5</span>-slim</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /pythonApp</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> requirements.txt /pythonApp</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> utils /pythonApp/utils</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> src /pythonApp/src</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> repo /pythonApp/repo</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> model /pythonApp/model</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> flaskApp /pythonApp/flaskApp</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> __init__.py /pythonApp</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> wait-for /</span></span><br><span class="line"><span class="keyword">ENV</span> FLASK_APP=/pythonApp/flaskApp/app.py</span><br><span class="line"><span class="keyword">ENV</span> PYTHONPATH /pythonApp</span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install --upgrade pip &amp;&amp; \</span></span><br><span class="line"><span class="bash">    pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get -q update &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get -qy install netcat</span></span><br></pre></td></tr></table></figure><hr><p>开始部署打造自己的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t csdn:v0.2 . <span class="comment"># &lt;名字&gt;:&lt;版本&gt; . &lt;= 注意这个点</span></span><br><span class="line"></span><br><span class="line">$ docker image ls <span class="comment"># 就能看到了 cfdac878807f 为csdn的</span></span><br><span class="line"></span><br><span class="line">$ docker container run -d -p 8080:8080 cfdac878807f <span class="comment"># 后台开启个container</span></span><br><span class="line"></span><br><span class="line">$ docker container <span class="built_in">exec</span> -it cfdac878807f sh <span class="comment"># 交互式进入容器</span></span><br></pre></td></tr></table></figure><h2 id="Docker上传仓库">Docker上传仓库</h2><p>你打造出了自己的容器，自己在本地用肯定不够，放到云上，别人也能用对吧～</p><p>首先到仓库里面创建仓库 <a href="https://hub.docker.com/repositories">https://hub.docker.com/repositories</a></p><img src="/img/mics/image-20220219233253507.webp" alt="创建效果" style="zoom:50%;" /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker login <span class="comment"># 然后本地登陆下验证下你是你就好了</span></span><br><span class="line"></span><br><span class="line">$ docker tag cfdac878807f &lt;hub-user&gt;/&lt;repo-name&gt;[:&lt;tag&gt;] <span class="comment"># 给你将要上传的打上标签</span></span><br><span class="line"></span><br><span class="line">$ docker push &lt;hub-user&gt;/&lt;repo-name&gt;:&lt;tag&gt; <span class="comment"># 传到哪个仓库去 不写Tag就是最新的</span></span><br></pre></td></tr></table></figure><p>到这里只要有网就能部署你的。</p><h2 id="docker-compose的编写与部署">docker-compose的编写与部署</h2><p>这个<code>docker-compose</code>又是干嘛的？ 这个是你给别人的，别人有你这个</p><p>就能马上搭建出你想给他的环境。类似于sh脚本，很快就在另外机器上部署相同环境。</p><p>名字也是写死的 <code>docker-compose.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7.31</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">small:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">172.19</span><span class="number">.0</span><span class="number">.3</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=root</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--character-set-server=utf8mb4</span> <span class="string">--collation-server=utf8mb4_unicode_ci</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hengyisky/daily:v0.1</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">small:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">172.19</span><span class="number">.0</span><span class="number">.4</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">mysql:mysql</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">-c</span> <span class="string">&#x27;/wait-for mysql:3306 -- python /pythonApp/src/app.py; python /pythonApp/flaskApp/run.py&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">small:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line">    <span class="attr">ipam:</span></span><br><span class="line">     <span class="attr">config:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="attr">subnet:</span> <span class="number">172.19</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br></pre></td></tr></table></figure><p>这里就是吧 mysql 与自己的环境部署到一个子网里面，然后暴露端口直接用就行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose pull <span class="comment"># 拉取需要的image</span></span><br><span class="line"></span><br><span class="line">$ docker-compose up -d --build <span class="comment"># 后台启动了直接用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于已经在运行的container，更改了本地的文件之后呢还是可以继续使用 docker-compose up -d --build</span></span><br></pre></td></tr></table></figure><h2 id="常用命令">常用命令</h2><p>除了上面的命令；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker container run -d -p 80:80 nginx <span class="comment"># 后台运行创建一个nginx容器</span></span><br><span class="line"></span><br><span class="line">$ docker run -it $(name) <span class="comment"># 执行容器中的默认脚本</span></span><br><span class="line"></span><br><span class="line">$ docker container <span class="built_in">exec</span> -it $(id) sh <span class="comment"># 交互式进入容器</span></span><br><span class="line"></span><br><span class="line">$ docker system prune -f <span class="comment"># 删除所有已经停止的容器</span></span><br><span class="line"></span><br><span class="line">$ docker image prune -a <span class="comment"># 删除所有没有使用的镜像</span></span><br></pre></td></tr></table></figure><p>其实吧：<code>Docker DeskTop</code>已经可以实现点点点了。  <a href="https://www.docker.com/products/docker-desktop">https://www.docker.com/products/docker-desktop</a></p><img src="/img/mics/image-20220219234504845.webp" alt="image-20220219234504845" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数字取证究竟怎么入门</title>
      <link href="/article/8679ce28.html"/>
      <url>/article/8679ce28.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言：-8">前言：</h2><p>数字取证，基本都是<strong>安全方向</strong>的小伙伴关心的比赛。像<strong>长安杯,美亚杯</strong>等都比较出名的。</p><p>但是<strong>入门难</strong>是个问题，以及如何请教，如何学习都是一脸懵逼～</p><p>总结了下高校赛的参赛选手基本上是警察学院👮‍♀️，网安人员🦧，安全爱好者。</p><p>我在CSND上发布的<a href="https://blog.csdn.net/weixin_51485807/article/details/121088494">2021年长安杯观看视频复盘感想</a>，会<strong>经常有人私信我要检材资料</strong>。</p><p>我就想直接开个仓库，一口气学习搞定入门。</p><div class="note green icon flat"><i class="note-icon fas fa-bullhorn"></i><p>以上仓库均由@<strong>HengY1</strong> 个人维护，欢迎大家提出自己看法。</p><p>交流与补充的话直接开Pr/issue一起讨论。最后求个点赞/star✨</p></div><hr><h2 id="你能收获什么？">你能收获什么？</h2><p>现在都讲究的是快餐文化，我直接把该<strong>仓库的大体内容写出来</strong>，直接看有不有需要的。</p><p>具体详情<strong>点击按钮进行跳转到仓库里面查看</strong>。 <a class="btn-beautify " href="https://github.com/HengY1Sky/Where-Is-Evidence"   title="点击查看仓库及相关资料"><i class="far fa-hand-point-right"></i><span>点击查看仓库及相关资料</span></a></p><p>即通过本仓库，你可以获得：</p><ul><li><p>个人<strong>比赛经验</strong>分享</p></li><li><p><strong>检材</strong>分享，上手实战</p></li><li><p><strong>复盘</strong>视频收集与分享</p></li><li><p>官方/民间/个人<strong>WriteUp</strong></p></li><li><p>比赛我究竟要<strong>掌握什么</strong></p></li><li><p>究竟要用什么<strong>工具</strong>来做</p></li></ul><hr><h2 id="个人比赛经验分享">个人<strong>比赛经验</strong>分享</h2><p>我个人算是个典型例子，<strong>有巅峰有滑铁卢</strong>。</p><details>  <summary>请听我娓娓道来</summary><ol><li><p>先说下配置问题，首先你得准备个<code>1T</code>硬盘，保证基本的硬盘读写问题。电脑的运行内存最好到<code>16G</code>,不然你开个多个虚拟机就是弟中弟了。</p></li><li><p>在来说比赛前吧，首先赛前的话就是去做<strong>往年的题</strong>，也就是拿着Wp和检材去复盘。跟着别人的答案去找题的答案，然后总结怎么做就好了。然后我就被2020年的美亚杯给坑了，因为2021年的美亚杯换了很多形式，做的我乱了手脚，就感觉题不是题一样。再去多看看别人发的视频，视频带着做那多好的是吧，到这里基本上赛前花时间就知道个大概了。</p></li><li><p>比赛中，跟队友好好沟通，然后多读题，别急着提交，题多的话就先分好工。然后队友之间的实力差距不要太大，不然很容易脱节。然后千万别心态崩溃，千万别心态崩溃，千万别心态崩溃。先把自己擅长的会的做了。然后推荐的解题是：Linux/Mac/手机/USB/Windows。先保证会的然后Windows往后移动，这是为什么呢？因为你拿工具扫了Windows基本上扫了个寂寞，基本上要开虚拟机进去看，基本上你的电脑会很卡，懂吗？本身检材开的够多了，软件开的够多了，你再来个Windows虚拟机。哦豁～</p></li><li><p>赛后好好复盘，准备下一场比赛，及时收集最新消息。</p></li><li><p>2021年的长安杯是我第一次正式比赛，比赛的内容基本上都是我平时在用的框架呀什么的。做题就是嗖嗖的秒杀。但是2021年的美亚杯就是我的滑铁卢了。我要吐槽的地方太多了。首先他说什么要录像好嘛没啥问题，关键是要用个他给你的软件，这个软件会自动杀掉你的QQ，微信，钉钉啥的，然后比赛还不能看手机，关键的来了！它密码太长官方给你的解压密码是错的，然后官方也不说，等人反应，这下好了20分钟多分钟了，官方换了密码，结果还是错的，最后我是实在憋不住问了别人，没有通讯工具，然后密码太长我一个个敲上去了，到解压出资料，40分钟已经过去了… 然后开始是分析手机，我拿出火眼发现分析个寂寞，根本扫不到材料。结果整了半天进去发现内置了分析器，进去还全是英文，又整了半天终于换成了中文。到这里我是彻底不想打了，整个比赛结束，我连Linux的题都没摸到… 下午队友少了一个，没啥想法了。<s>（看来火眼</s><s>钱没给够啊）</s>。</p></li></ol></details><hr><h2 id="历年检材分享">历年检材分享</h2><blockquote><ol><li>Vc container的挂载密码是指你输入进去后，你的电脑就多了个指定的盘</li><li>多个压缩文件合并使用7z多选右键合并解压，输入密码就下来完整的</li></ol></blockquote><p>2021年美亚杯的解压密码统一为： <code>MeiyaCup2021</code></p><p>模拟练习搭配：<a href="https://forensics.xidian.edu.cn/">https://forensics.xidian.edu.cn/</a> 使用</p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">链接</th><th style="text-align:center">提取码</th><th style="text-align:center">解压密码/挂载密码</th></tr></thead><tbody><tr><td style="text-align:center">2021年长安杯</td><td style="text-align:center"><a href="https://www.aliyundrive.com/s/bfkLNmRXs7i">https://www.aliyundrive.com/s/bfkLNmRXs7i</a></td><td style="text-align:center">无</td><td style="text-align:center"><a href="http://xn--2021CAB-changancup-k412af99rtsxh.com">2021第三届CAB-changancup.com</a></td></tr><tr><td style="text-align:center">2021年美亚杯个人赛</td><td style="text-align:center"><a href="https://pan.baidu.com/s/15kQsiW1h_Onjl3dxokNHzA">https://pan.baidu.com/s/15kQsiW1h_Onjl3dxokNHzA</a></td><td style="text-align:center">dv2g</td><td style="text-align:center">HfsCk]&lt;eUqc5Q{(DG$ugiGlt8ezGdaZ&gt;!pQC-H\5BAc^gBo/^qq)/i2lufiN@H&quot;Y</td></tr><tr><td style="text-align:center">2021年美亚杯团队赛</td><td style="text-align:center"><a href="https://pan.baidu.com/s/1Rj1r8jnMIiBfGXK-lyS7DQ">https://pan.baidu.com/s/1Rj1r8jnMIiBfGXK-lyS7DQ</a></td><td style="text-align:center">jii2</td><td style="text-align:center">uR%{)Y’Qz-n3oGU`ZJo@(1ntxp8U1+bW;JlZH^I4%0rxf;[N+eQ)Lolrw&amp;E%,4q1</td></tr></tbody></table><h2 id="复盘视频">复盘视频</h2><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">链接</th></tr></thead><tbody><tr><td style="text-align:center">2021年长安杯完整复盘</td><td style="text-align:center"><a href="https://www.bilibili.com/video/BV1hP4y1b7Vj">https://www.bilibili.com/video/BV1hP4y1b7Vj</a></td></tr><tr><td style="text-align:center">2021年美亚杯穿插复盘</td><td style="text-align:center"><a href="https://mudu.tv/live/watch/general?id=lj71nj2l">https://mudu.tv/live/watch/general?id=lj71nj2l</a></td></tr></tbody></table><h2 id="WriteUp">WriteUp</h2><ul><li><strong>XDforensics-Wiki</strong> 上的真题WriteUp ：<a href="https://forensics.xidian.edu.cn/wiki/Zello&amp;Xeno/">https://forensics.xidian.edu.cn/wiki/Zello&amp;Xeno/</a></li></ul><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">链接</th></tr></thead><tbody><tr><td style="text-align:center">2021年美亚杯个人赛Write-up</td><td style="text-align:center"><a href="https://mp.weixin.qq.com/s/brTWF2bCTQb-2yH457-C_A">https://mp.weixin.qq.com/s/brTWF2bCTQb-2yH457-C_A</a></td></tr><tr><td style="text-align:center">2019年长安杯Write-up</td><td style="text-align:center"><a href="https://github.com/HengY1Sky/Where-Is-Evidence/blob/main/2019%E9%95%BF%E5%AE%89%E6%9D%AFWp.md">Github仓库</a></td></tr><tr><td style="text-align:center">2020年长安杯Write-up</td><td style="text-align:center"><a href="https://github.com/HengY1Sky/Where-Is-Evidence/blob/main/2020%E9%95%BF%E5%AE%89%E6%9D%AFWp.md">Github仓库</a></td></tr><tr><td style="text-align:center">2021年长安杯Write-up</td><td style="text-align:center"><a href="https://github.com/HengY1Sky/Where-Is-Evidence/blob/main/2021%E5%B9%B4%E9%95%BF%E5%AE%89%E6%9D%AFWp.md">Github仓库</a></td></tr><tr><td style="text-align:center">2021年长安杯观看视频复盘感想</td><td style="text-align:center"><a href="https://github.com/HengY1Sky/Where-Is-Evidence/blob/main/2021%E5%B9%B4%E9%95%BF%E5%AE%89%E6%9D%AF%E8%A7%82%E7%9C%8B%E8%A7%86%E9%A2%91%E5%A4%8D%E7%9B%98%E6%84%9F%E6%83%B3.md">Github仓库</a></td></tr><tr><td style="text-align:center">第七届“美亚杯”取证小程序解题复盘回顾第一期</td><td style="text-align:center"><a href="https://mp.weixin.qq.com/s/hLOeiD2fbSb8K63-q8t6Rw">https://mp.weixin.qq.com/s/hLOeiD2fbSb8K63-q8t6Rw</a></td></tr><tr><td style="text-align:center">第七届“美亚杯”解题复盘回顾第二期</td><td style="text-align:center"><a href="https://mp.weixin.qq.com/s/K1_OZdo9V0wRro1zwhAIIw">https://mp.weixin.qq.com/s/K1_OZdo9V0wRro1zwhAIIw</a></td></tr><tr><td style="text-align:center">第七届“美亚杯”解题复盘回顾第三期</td><td style="text-align:center"><a href="https://mp.weixin.qq.com/s/YFmHxmZydxejXLwU1oYewQ">https://mp.weixin.qq.com/s/YFmHxmZydxejXLwU1oYewQ</a></td></tr></tbody></table><h2 id="能力要求">能力要求</h2><p>老基础三件套： Mysql + Apache + Php</p><p>前端三件套： Html + CSS + Js</p><p>掌握：Python；Php；Java；JavaScript；Golong</p><p>*Linux操作熟练  *Mysql操作熟练</p><p>总的来说从 <strong>Linux基础/编程语言的基础</strong> =&gt; <strong>功能实现/框架掌握</strong></p><p>学的越多，你会发现你越是啥不是～</p><h2 id="必备工具">必备工具</h2><p><strong>分析软件你个人是下载不到的</strong>，叫老师联系对应公司的人</p><p>上交你们的学生证照片会<strong>发账号权限下来/密钥下来</strong></p><p>软件使用是有时间限制的，且用且珍惜</p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">评价</th><th style="text-align:center">说明书</th></tr></thead><tbody><tr><td style="text-align:center">火眼分析</td><td style="text-align:center">分析手机是真的好用</td><td style="text-align:center"><a href="https://github.com/HengY1Sky/Where-Is-Evidence/blob/main/%E7%81%AB%E7%9C%BC%E6%89%8B%E6%9C%BA%E5%8F%96%E8%AF%81%E8%AF%B4%E6%98%8E%E4%B9%A6.pdf">https://github.com/HengY1Sky/Where-Is-Evidence/blob/main/火眼手机取证说明书.pdf</a></td></tr><tr><td style="text-align:center">火眼仿真</td><td style="text-align:center">虚拟机专用，绕密码啥的挺好用的</td><td style="text-align:center"><a href="https://github.com/HengY1Sky/Where-Is-Evidence/blob/main/%E7%81%AB%E7%9C%BC%E4%BB%BF%E7%9C%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E4%B9%A6.pdf">https://github.com/HengY1Sky/Where-Is-Evidence/blob/main/火眼仿真使用说明书.pdf</a></td></tr><tr><td style="text-align:center">取证大师</td><td style="text-align:center">Window/Linux分析比火眼全，小工具多</td><td style="text-align:center">暂无</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Js逆向练习制造Token与Id</title>
      <link href="/article/6d98b2b4.html"/>
      <url>/article/6d98b2b4.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言：-3">前言：</h2><p>闲来无聊，把《Pyhton3网络爬虫开发实战(第二版)》看完了Js逆向部分。</p><p>最后的实战部分感觉挺有挑战性的，正好崔佬也有详细的教程。</p><p>平时的逆向都是野路子，刚好快回学校了有时间。</p><p>那为什么不自己动手下呢？下面记录下过程，只会更加详细。</p><h2 id="观察页面：">观察页面：</h2><p>废话不多说，直接上靶场：<a href="https://spa6.scrape.center">https://spa6.scrape.center</a></p><p>我们的目标是：1.拿到列表页的请求Ajax的Token加密 2. 详情页的Id加密与Token</p><p><img src="/img/JsReverse/58413655a0d3b23bf06dc701444e3435.webp" alt=""></p><img src="/img/JsReverse/image-20220210220457469.webp" alt="" width=90% /><p>查看网页源码可以看到：很强烈的Vue打包出来的样子，即使用的使用<code>SPA</code>页面</p><img src="/img/JsReverse/image-20220210220720322.webp" alt="" width=90% /><p>观察Js也会发现，代码压缩，变量名字十六进制转换。</p><img src="/img/JsReverse/image-20220210220948065.webp" alt="" width=90% /><p>好了我们将任务进行拆分，先拿到列表页面的加密规则，即去请求列表的token怎么搞到的</p><h2 id="获取列表页面：">获取列表页面：</h2><p>使用Ajax断点，直接拿到即将提交请求那个地方，然后使用堆栈，一点点往回找，这是基本思路</p><p>根据上面可以看到请求路径是：<code>/api/movie/?limit=10&amp;offset=0&amp;token=...</code> 打上断点刷新页面</p><img src="/img/JsReverse/image-20220210221604905.webp" alt="" width=90% /><img src="/img/JsReverse/image-20220210221714743.webp" alt="" width=90% /><p>开始针对堆栈往回找：发现axios的get方法：参数都是跟上面请求的十分符合。</p><p>到这里我们可以看到<code>_0x263439 = Object(_0x2fa7bd['a'])(this['$store']['state']['url']['index']);</code>这个应该就是token</p><img src="/img/JsReverse/image-20220210222010258.webp" alt="" width=90% /><p>因为找到具体的了，取消xhr断电在169行打上断点。把鼠标移在上面可以发现</p><p><code>/api/movie</code>作为参数传入进去，前面是个函数，同样把鼠标移上去也可以看到</p><img src="/img/JsReverse/image-20220210222357464.webp" alt="" width=90% /><p>然后我们使用Watch监视看看对应的<code>_0x2fa7bd</code>：去找下面的函数</p><img src="/img/JsReverse/image-20220210222633965.webp" alt="" width=90% /><img src="/img/JsReverse/image-20220210222902673.webp" alt="" width=90% /><p>格式化后的对应的函数就是把参数传入进来生成Token的逻辑函数了：</p><img src="/img/JsReverse/image-20220210223045604.webp" alt="" width=90% /><p>单步调试：去看逻辑</p><img src="/img/JsReverse/image-20220210223400006.webp" alt="" width=90% /><img src="/img/JsReverse/image-20220210224351817.webp" alt="" width=90% /><p>*最后的逻辑就是：</p><p><strong>传入地址这里是：<code>/api/movie</code>与时间戳用逗号拼接后，使用SHA1进行加密后，再与时间戳拼接，再用Base64编码一次就是Token</strong></p><p>这句话有点长，谅解下QAQ，到这里就可以用Python模拟了</p><p>当然也可以使用自带的重写功能：方便看其中的某些变量</p><blockquote><p>步骤是：</p><ol><li>创建一个保存的文件夹</li><li>被格式化的文件是不能修改的但是可以复制出来</li><li>在编辑器里面修改好了然后在原文件里面全选然后替换</li><li>下次刷新会自动替换</li></ol></blockquote><img src="/img/JsReverse/image-20220210225656780.webp" alt="" width=90% /><h2 id="获取详情页加密">获取详情页加密</h2><p>正如最开始的时候会发现：跳转到详情页面的链接已经加密好了，而不是在请求时候进行加密：</p><img src="/img/JsReverse/image-20220210233557960.webp" alt="" width=90% /><p>看到请求的链接的Token的话：应该是跟着请求加密生成的。</p><p>所以可以看出来我们现在要拿到<code>/detail/xxx</code>是怎么来的以及Token怎么出现的。</p><p>同时可以盲猜一波Token的加密方式应该是一样的，即只是换了上面的参数。</p><p>现在我们开始分析：<strong>确定是在完成请求列表页后经过Js加密已经形成的</strong></p><img src="/img/JsReverse/image-20220210234105022.webp" alt="" width=90% /><p>这样打断点即加载好了开始调试。<strong>但是这里有个问题就是接下来不知道要走多久</strong><img src="/img/JsReverse/image-20220210234232496.webp" alt="" width=90% /></p><p>这个地方就是学到新东西的地方：因为token的样子应该是最后Base64编码过，而在前端Base64的库就那么几个</p><p>通常是<code>btao</code>或者是<code>crypto-js</code>等，则可以使用🪝钩子来截取到</p><blockquote><p>这个意思就是func = object[attr]先拿到，然后重写之后，调用回去执行</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">  &#x27;use strict&#x27;</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">hook</span>(<span class="params">object ,attr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> func = object[attr]</span><br><span class="line">    object[attr] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;hooked&quot;</span>, object, attr, <span class="built_in">arguments</span>)</span><br><span class="line">      <span class="keyword">var</span> ret = func.apply(object, <span class="built_in">arguments</span>)</span><br><span class="line">      <span class="keyword">debugger</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;res&quot;</span>, ret)</span><br><span class="line">      <span class="keyword">return</span> ret</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  hook(<span class="built_in">window</span>, <span class="string">&#x27;btoa&#x27;</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>注入方式可以是：1. 控制台 2. 重写Js 3. 油猴脚本</p><p>因为打了断点，我们在控制台重写btoa方法，这样到了方法执行的时候就会到我们写入的里面去验证</p><p>这里有几个注意点：</p><ol><li>控制台输入后 可以调用<code>btoa('1')</code>进入临时文件中的debugger</li><li>因为是<code>SPA</code>页面所以直接请求第二页可以触发写入的btoa，<strong>刷新则不行</strong>！</li></ol><img src="/img/JsReverse/image-20220211000800269.webp" alt="" width=90% /><p>点击第二页，加密规则都是一样的。直接触发（这里我是第二页去点第一页）</p><img src="/img/JsReverse/image-20220211001051507.webp" alt="" width=90% /><p>往下找了一层发现已经出来了则继续往下找</p><img src="/img/JsReverse/image-20220211001220739.webp" alt="" width=90% /><p>发现了拼凑：一串不知道是啥的+一个啥</p><img src="/img/JsReverse/image-20220211001431465.webp" alt="" width=90% /><p>同时发现：<code>_0x11a046</code>是写死的</p><img src="/img/JsReverse/image-20220211001556051.webp" alt="" width=90% /><p>拼凑的那个数字继续往下找：发现就是拿到结果的ID</p><img src="/img/JsReverse/image-20220211001717040.webp" alt="" width=90% /><p>到这里详情页加密已经出来了。现在验证下token怎么来的，好的方式一模一样</p><img src="/img/JsReverse/image-20220211002248300.webp" alt="" width=90% /><h2 id="总结">总结</h2><ol><li>做Js逆向基础要懂要会</li><li>心要大，要敢猜，不然真的一下子跟正确答案擦肩而过</li><li>同时心要细，不同的写法同一种效果，不要放过觉得不可能的地方</li><li>Python实现的方式很多，自己多捣鼓下</li></ol>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>学习Python高级编程到asyncio并发实践</title>
      <link href="/article/4ba9700a.html"/>
      <url>/article/4ba9700a.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言：-7">前言：</h2><p>今天也顺利把<strong>Python3高级核心技术97讲</strong>看完了</p><p>课程链接我也贴一下：<a href="https://coding.imooc.com/class/chapter/200.html">https://coding.imooc.com/class/chapter/200.html</a></p><p>总体说下感受：<strong>很推荐吧，循序渐进学习，拓展了很多自己的不足</strong></p><p>正好我现在我看《Pyhton3网络爬虫开发实战(第二版)》也200页出头了</p><p>刚好来到了<strong>aiohttp的使用</strong>,这不正好？ 把崔佬的代码拿下来看看</p><p>那么接下来我简单讲解下自己的理解。图省事自己到最后的完成代码</p><blockquote><p>注明：大部分我都写上了注释，是一个很好的实践代码</p><p>如果哪里我没理解对，记得来拍醒我下，请赐教，欢迎与我交流</p></blockquote><h2 id="图解：">图解：</h2><blockquote><p>首先得理解什么是多线程，什么是协程？ 以及相关的术语</p><p>简单来说：多线程就是多个线程同时并行；协程就是单个线程开启多个分支</p><p>协程将CPU更大利用化，简单比方：你去请求网络 那么CPU就在这里瞎等</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/b482423210574f27c212e38af2fb4de3.png" alt="Untitled-2022-02-04-1909"></p><h2 id="注意点">注意点</h2><div class="note orange icon flat"><i class="note-icon fas fa-battery-half"></i><p>为什么将session设置在__init__中</p></div><p>免得一断一连。</p><div class="note orange icon flat"><i class="note-icon fas fa-battery-half"></i><p>gather与wait区别</p></div><p>简单理解gather的功能更高级，可以拿到结果。想了解更多直接谷歌QAQ</p><div class="note orange icon flat"><i class="note-icon fas fa-battery-half"></i><p>loop 的作用</p></div><p>可以看作这个程序的心跳，不停的循环。推荐看看我上面推荐的课程<br>从12章到13章，从最开始的源码程序实现到后面封装调用库<br>循序渐进讲的不错，还可以学学yield怎么回事</p><div class="note orange icon flat"><i class="note-icon fas fa-battery-half"></i><p>使用asyncio.sleep而不是用time.sleep 使用motor异步库而不是用平时的</p></div><p>使用time.sleep不是不行，会报错但可以拿到，具体的原因建议看看第12，13章</p><h2 id="完整代码">完整代码</h2><blockquote><p>原本的代码在 <a href="https://github.com/Python3WebSpider/ScrapeSpa5">https://github.com/Python3WebSpider/ScrapeSpa5</a></p><p>我简单改了改小部分，学习的目的达到即可～</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用aiohttp异步爬去</span></span><br><span class="line"><span class="comment"># 目标网站：https://spa5.scrape.center/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> aiohttp <span class="keyword">import</span> ContentTypeError</span><br><span class="line"><span class="keyword">from</span> motor.motor_asyncio <span class="keyword">import</span> AsyncIOMotorClient</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置通用参数</span></span><br><span class="line">PAGE_SIZE = <span class="number">18</span>  <span class="comment"># 请求个数</span></span><br><span class="line">PAGE_NUMBER = <span class="number">1</span>  <span class="comment"># 请求页数</span></span><br><span class="line">CONCURRENCY = <span class="number">5</span>  <span class="comment"># 并发数量</span></span><br><span class="line"><span class="comment"># 设置日志格式</span></span><br><span class="line">logging.basicConfig(filename=<span class="string">&#x27;log.log&#x27;</span>, level=logging.INFO, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s: %(message)s&#x27;</span>)</span><br><span class="line"><span class="comment"># 配置mongodb文件</span></span><br><span class="line">MONGO_CONNECTION_STRING = <span class="string">&#x27;mongodb://localhost:27017&#x27;</span></span><br><span class="line">MONGO_DB_NAME = <span class="string">&#x27;books&#x27;</span></span><br><span class="line">MONGO_COLLECTION_NAME = <span class="string">&#x27;books&#x27;</span></span><br><span class="line"><span class="comment"># 使用motor异步库</span></span><br><span class="line">client = AsyncIOMotorClient(MONGO_CONNECTION_STRING)</span><br><span class="line">db = client[MONGO_DB_NAME]</span><br><span class="line">collection = db[MONGO_CONNECTION_STRING]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spider</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.semaphore = asyncio.Semaphore(CONCURRENCY)  <span class="comment"># 设置并发数量</span></span><br><span class="line">        self.session = aiohttp.ClientSession()  <span class="comment"># 设置session() 免得</span></span><br><span class="line">        self.ids = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">scrapeApi</span>(<span class="params">self, url</span>):</span></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> self.semaphore:  <span class="comment"># 限制并发</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                logging.info(<span class="string">&#x27;scraping %s&#x27;</span>, url)</span><br><span class="line">                <span class="keyword">async</span> <span class="keyword">with</span> self.session.get(url) <span class="keyword">as</span> response:  <span class="comment"># 使用 async with 上下文会自动关闭</span></span><br><span class="line">                    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)  <span class="comment"># 必须使用asyncio.sleep而不是time.sleep</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">await</span> response.json()  <span class="comment"># 为什么要使用await在pycharm中点进入发现是async申明的</span></span><br><span class="line">            <span class="keyword">except</span> ContentTypeError <span class="keyword">as</span> e:</span><br><span class="line">                logging.error(<span class="string">&#x27;error occurred while scraping %s&#x27;</span>, url, exc_info=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">scrapeIndex</span>(<span class="params">self, page</span>):</span></span><br><span class="line">        <span class="comment"># todo 拼凑出来对应的url 然后教给下一个协程</span></span><br><span class="line">        url = <span class="string">&#x27;https://spa5.scrape.center/api/book/?limit=18&amp;offset=&#123;offset&#125;&#x27;</span></span><br><span class="line">        url = url.<span class="built_in">format</span>(offset=PAGE_SIZE * (page - <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> self.scrapeApi(url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">scrapeDetail</span>(<span class="params">self, <span class="built_in">id</span></span>):</span></span><br><span class="line">        url = <span class="string">&#x27;https://spa5.scrape.center/api/book/&#123;id&#125;&#x27;</span></span><br><span class="line">        url = url.<span class="built_in">format</span>(<span class="built_in">id</span>=<span class="built_in">id</span>)</span><br><span class="line">        data = <span class="keyword">await</span> self.scrapeApi(url)  <span class="comment"># 拿到结果就存入</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;id: <span class="subst">&#123;<span class="built_in">id</span>&#125;</span> : data: <span class="subst">&#123;data&#125;</span>&quot;</span>)  <span class="comment"># 具体内容自己操作写就好了(注意不是网络IO了不用await)</span></span><br><span class="line">        <span class="comment"># await self.saveData(data)  # 我是懒得去开个mongoQAQ</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">saveData</span>(<span class="params">data</span>):</span></span><br><span class="line">        logging.info(<span class="string">&#x27;saving data %s&#x27;</span>, data)</span><br><span class="line">        <span class="keyword">if</span> data:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> collection.update_one(&#123;</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>: data.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="string">&#x27;$set&#x27;</span>: data</span><br><span class="line">            &#125;, upsert=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># todo 设置任务</span></span><br><span class="line">        <span class="comment"># 从这一步的话可以拿到指定页数的列表</span></span><br><span class="line">        scrape_index_tasks = [asyncio.ensure_future(self.scrapeIndex(page)) <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, PAGE_NUMBER + <span class="number">1</span>)]</span><br><span class="line">        results = <span class="keyword">await</span> asyncio.gather(*scrape_index_tasks)  <span class="comment"># 使用gather而不是wait</span></span><br><span class="line">        <span class="comment"># todo 拿到每一页中的ids</span></span><br><span class="line">        <span class="comment"># 这一步就是从预览大概到每一页中获取详细信息</span></span><br><span class="line">        <span class="keyword">for</span> index_data <span class="keyword">in</span> results:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> index_data:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> index_data.get(<span class="string">&#x27;results&#x27;</span>):  <span class="comment"># 使用字典的get方法</span></span><br><span class="line">                self.ids.append(item.get(<span class="string">&#x27;id&#x27;</span>))</span><br><span class="line">        <span class="comment"># todo 根据拿到的id进入协程同步进行拿到想要的结果并存入</span></span><br><span class="line">        scrape_detail_tasks = [asyncio.ensure_future(self.scrapeDetail(each)) <span class="keyword">for</span> each <span class="keyword">in</span> self.ids]</span><br><span class="line">        <span class="keyword">await</span> asyncio.wait(scrape_detail_tasks)</span><br><span class="line">        <span class="comment"># todo 最后关闭session会话</span></span><br><span class="line">        <span class="keyword">await</span> self.session.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    spider = Spider()</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    loop.run_until_complete(spider.main())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MAC上RabbitMQ从安装到用GO快速实现搬移</title>
      <link href="/article/5fe856cc.html"/>
      <url>/article/5fe856cc.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>最近在跟慕课做一个秒杀商城的小项目，接触了RabbitMQ</p><p>虽然平时是在Python中实现消息队列，但是不得不说RabbitMQ香呀</p><p>今天也是除夕，在这个祝大家<strong>新年快乐</strong>，发个小水文章吧QAQ</p><h2 id="安装开始">安装开始</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础安装</span></span><br><span class="line">$ brew install rabbitmq</span><br><span class="line">$ vim ~/.zshrc <span class="comment"># 将 export PATH=$PATH:/usr/local/sbin 写入</span></span><br><span class="line">$ rabbitmq-server <span class="comment"># 重新打开终端，开启服务</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启插件</span></span><br><span class="line">$ rabbitmq-plugins list <span class="comment"># 查看插件</span></span><br><span class="line">$ rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management <span class="comment"># 启动管理插件</span></span><br><span class="line">$ rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_tracing <span class="comment"># 启动日志</span></span><br><span class="line">$ rabbitmq-plugins <span class="built_in">disable</span> rabbitmq_tracing <span class="comment"># 关闭日志</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 额外命令</span></span><br><span class="line">$ rabbitmq-server -detached <span class="comment"># 后台启动</span></span><br><span class="line">$ rabbitmqctl status <span class="comment"># 查看状态</span></span><br><span class="line">$ rabbitmqctl stop <span class="comment"># 关闭</span></span><br></pre></td></tr></table></figure><h2 id="打好基础">打好基础</h2><blockquote><p>这些都是很基本的概念，你得明白什么是什么就好了</p><p>因为作为工具，首先要会用起来，会采用囫囵吞枣的模式学习</p><p>随着后面的深入，慢慢了解特点吧</p></blockquote><table><thead><tr><th style="text-align:center">概念</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Channel</td><td style="text-align:center">生产者publish或是消费者subscribe一个队列都是通过信道来通信的</td></tr><tr><td style="text-align:center">Exchange</td><td style="text-align:center">exchange的作用就是类似路由器，服务器会根据路由键将消息从交换器路由到队列上去</td></tr><tr><td style="text-align:center">Queue</td><td style="text-align:center">队列收到的消息将发送给消费者</td></tr><tr><td style="text-align:center">Binding</td><td style="text-align:center">建立链接交换的绑定信息</td></tr><tr><td style="text-align:center">VirtualHost</td><td style="text-align:center">不同的隔离区，防止污染</td></tr><tr><td style="text-align:center">Connection</td><td style="text-align:center">建立的链接</td></tr></tbody></table><hr><table><thead><tr><th style="text-align:center">工作模式</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">simple</td><td style="text-align:center">最简单的收发模式</td></tr><tr><td style="text-align:center">work</td><td style="text-align:center">资源的竞争</td></tr><tr><td style="text-align:center">publish/subscribe</td><td style="text-align:center">共享资源</td></tr><tr><td style="text-align:center">routing</td><td style="text-align:center">只能匹配上路由key对应的消息队列,对应的消费者才能消费消息</td></tr><tr><td style="text-align:center">topic</td><td style="text-align:center">routing的一种模糊匹配</td></tr></tbody></table><h2 id="代码实现-2">代码实现</h2><h3 id="功能仓库文件">功能仓库文件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MQURL 连接信息 amqp://账号:密码@ip:host/vhost</span></span><br><span class="line"><span class="keyword">const</span> MQURL = <span class="string">&quot;amqp://guest:guest@127.0.0.1:5672/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// RabbitMQ rabbitMQ结构体</span></span><br><span class="line"><span class="keyword">type</span> RabbitMQ <span class="keyword">struct</span> &#123;</span><br><span class="line">conn      *amqp.Connection <span class="comment">// 链接</span></span><br><span class="line">channel   *amqp.Channel    <span class="comment">// 通道</span></span><br><span class="line">QueueName <span class="keyword">string</span>           <span class="comment">//队列名称</span></span><br><span class="line">Exchange  <span class="keyword">string</span>           <span class="comment">//交换机名称</span></span><br><span class="line">Key       <span class="keyword">string</span>           <span class="comment">//bind Key 名称</span></span><br><span class="line">Mqurl     <span class="keyword">string</span>           <span class="comment">//连接信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewRabbitMQ 创建结构体实例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRabbitMQ</span><span class="params">(queueName <span class="keyword">string</span>, exchange <span class="keyword">string</span>, key <span class="keyword">string</span>)</span> *<span class="title">RabbitMQ</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;RabbitMQ&#123;QueueName: queueName, Exchange: exchange, Key: key, Mqurl: MQURL&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Destroy 断开 channel 和 connection</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *RabbitMQ)</span> <span class="title">Destroy</span><span class="params">()</span></span> &#123;</span><br><span class="line">r.channel.Close() <span class="comment">// 断开 channel</span></span><br><span class="line">r.conn.Close()    <span class="comment">// 断开 conn</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *RabbitMQ)</span> <span class="title">failOnErr</span><span class="params">(err error, message <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;%s:%s&quot;</span>, message, err)         <span class="comment">// 打印错误</span></span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;%s:%s&quot;</span>, message, err)) <span class="comment">// 抛出错误</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewRabbitMQSimple 创建简单模式下RabbitMQ实例</span></span><br><span class="line"><span class="comment">// 在Simple模式下唯一不同的是 queueName</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRabbitMQSimple</span><span class="params">(queueName <span class="keyword">string</span>)</span> *<span class="title">RabbitMQ</span></span> &#123;</span><br><span class="line"><span class="comment">// todo 创建RabbitMQ实例</span></span><br><span class="line">rabbitmq := NewRabbitMQ(queueName, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="comment">// todo 补上conn与channel</span></span><br><span class="line"><span class="comment">//获取connection</span></span><br><span class="line">rabbitmq.conn, err = amqp.Dial(rabbitmq.Mqurl)</span><br><span class="line">rabbitmq.failOnErr(err, <span class="string">&quot;failed to connect rabbitmq!&quot;</span>)</span><br><span class="line"><span class="comment">//获取channel</span></span><br><span class="line">rabbitmq.channel, err = rabbitmq.conn.Channel()</span><br><span class="line">rabbitmq.failOnErr(err, <span class="string">&quot;failed to open a channel&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> rabbitmq</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PublishSimple 简单模式下队列生产</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *RabbitMQ)</span> <span class="title">PublishSimple</span><span class="params">(message <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// todo 申请队列，如果队列不存在会自动创建，存在则跳过创建</span></span><br><span class="line">_, err := r.channel.QueueDeclare(</span><br><span class="line">r.QueueName, <span class="comment">// 首先放入名称</span></span><br><span class="line"><span class="literal">false</span>,       <span class="comment">//是否持久化</span></span><br><span class="line"><span class="literal">false</span>,       <span class="comment">//是否自动删除</span></span><br><span class="line"><span class="literal">false</span>,       <span class="comment">//是否具有排他性</span></span><br><span class="line"><span class="literal">false</span>,       <span class="comment">//是否阻塞处理</span></span><br><span class="line"><span class="literal">nil</span>,         <span class="comment">//额外的属性</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//todo 调用channel 发送消息到队列中</span></span><br><span class="line">r.channel.Publish(</span><br><span class="line">r.Exchange, <span class="comment">// 此处为空</span></span><br><span class="line">r.QueueName,</span><br><span class="line"><span class="literal">false</span>, <span class="comment">//如果为true，根据自身exchange类型和routeKey规则；无法找到符合条件的队列会把消息返还给发送者</span></span><br><span class="line"><span class="literal">false</span>, <span class="comment">//如果为true，当exchange发送消息到队列后发现队列上没有消费者，则会把消息返还给发送者</span></span><br><span class="line">amqp.Publishing&#123;</span><br><span class="line">ContentType: <span class="string">&quot;text/plain&quot;</span>,</span><br><span class="line">Body:        []<span class="keyword">byte</span>(message),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ConsumeSimple 简单模式下消费者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *RabbitMQ)</span> <span class="title">ConsumeSimple</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//todo 申请队列，如果队列不存在会自动创建，存在则跳过创建</span></span><br><span class="line">q, err := r.channel.QueueDeclare(</span><br><span class="line">r.QueueName,</span><br><span class="line"><span class="literal">false</span>, <span class="comment">//是否持久化</span></span><br><span class="line"><span class="literal">false</span>, <span class="comment">//是否自动删除</span></span><br><span class="line"><span class="literal">false</span>, <span class="comment">//是否具有排他性</span></span><br><span class="line"><span class="literal">false</span>, <span class="comment">//是否阻塞处理</span></span><br><span class="line"><span class="literal">nil</span>,   <span class="comment">//额外的属性</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//todo 接收消息</span></span><br><span class="line">msg, err := r.channel.Consume(</span><br><span class="line">q.Name, <span class="comment">// queue</span></span><br><span class="line"><span class="string">&quot;&quot;</span>,     <span class="comment">//用来区分多个消费者 此处不区分</span></span><br><span class="line"><span class="literal">true</span>,   <span class="comment">//是否自动应答</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">//是否独有</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">//设置为true，表示不能将同一个Connection中生产者发送的消息传递给这个Connection中的消费者</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// 是否阻塞处理</span></span><br><span class="line"><span class="literal">nil</span>,    <span class="comment">// 额外的属性</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//todo 启用协程处理消息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处使用forever的意思为因为协程会始终监听消息(除非手动结束)</span></span><br><span class="line"><span class="comment">// 手动结束才会进行 &lt;-forever 有协程且一直尝试读取数据</span></span><br><span class="line">forever := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> d := <span class="keyword">range</span> msg &#123;</span><br><span class="line"><span class="comment">// 消息逻辑处理</span></span><br><span class="line">log.Printf(<span class="string">&quot;Received a message: %s&quot;</span>, d.Body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">log.Printf(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>)</span><br><span class="line">&lt;-forever</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewRabbitMQPubSub 订阅模式创建RabbitMQ实例就要设置路由器了</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRabbitMQPubSub</span><span class="params">(exchangeName <span class="keyword">string</span>)</span> *<span class="title">RabbitMQ</span></span> &#123;</span><br><span class="line"><span class="comment">//todo 创建RabbitMQ实例</span></span><br><span class="line">rabbitmq := NewRabbitMQ(<span class="string">&quot;&quot;</span>, exchangeName, <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="comment">//todo 获取connection和获取channel</span></span><br><span class="line">rabbitmq.conn, err = amqp.Dial(rabbitmq.Mqurl)</span><br><span class="line">rabbitmq.failOnErr(err, <span class="string">&quot;failed to connect rabbitmq!&quot;</span>)</span><br><span class="line">rabbitmq.channel, err = rabbitmq.conn.Channel()</span><br><span class="line">rabbitmq.failOnErr(err, <span class="string">&quot;failed to open a channel&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> rabbitmq</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PublishPub 订阅模式生产</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *RabbitMQ)</span> <span class="title">PublishPub</span><span class="params">(message <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//todo 尝试创建交换机</span></span><br><span class="line">err := r.channel.ExchangeDeclare(</span><br><span class="line">r.Exchange,</span><br><span class="line"><span class="string">&quot;fanout&quot;</span>,</span><br><span class="line"><span class="literal">true</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>, <span class="comment">//true表示这个exchange不可以被client用来推送消息，仅用来进行exchange和exchange之间的绑定</span></span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">r.failOnErr(err, <span class="string">&quot;Failed to declare an exchange&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//todo 发送消息</span></span><br><span class="line">err = r.channel.Publish(</span><br><span class="line">r.Exchange,</span><br><span class="line"><span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line">amqp.Publishing&#123;</span><br><span class="line">ContentType: <span class="string">&quot;text/plain&quot;</span>,</span><br><span class="line">Body:        []<span class="keyword">byte</span>(message),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReceiveSub 订阅模式消费端代码</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *RabbitMQ)</span> <span class="title">ReceiveSub</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//todo 试探性创建交换机</span></span><br><span class="line">err := r.channel.ExchangeDeclare(</span><br><span class="line">r.Exchange,</span><br><span class="line"><span class="string">&quot;fanout&quot;</span>, <span class="comment">//交换机类型</span></span><br><span class="line"><span class="literal">true</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>, <span class="comment">//true表示这个exchange不可以被client用来推送消息，仅用来进行exchange和exchange之间的绑定</span></span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>,</span><br><span class="line">)</span><br><span class="line">r.failOnErr(err, <span class="string">&quot;Failed to declare an exchange&quot;</span>)</span><br><span class="line"><span class="comment">//todo 试探性创建队列，这里注意队列名称不要写</span></span><br><span class="line">q, err := r.channel.QueueDeclare(</span><br><span class="line"><span class="string">&quot;&quot;</span>, <span class="comment">//随机生产队列名称</span></span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">true</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>,</span><br><span class="line">)</span><br><span class="line">r.failOnErr(err, <span class="string">&quot;Failed to declare a queue&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//todo 绑定队列到 exchange 中</span></span><br><span class="line">err = r.channel.QueueBind(</span><br><span class="line">q.Name,</span><br><span class="line"><span class="string">&quot;&quot;</span>, <span class="comment">//在pub/sub模式下，这里的key要为空</span></span><br><span class="line">r.Exchange,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//todo 消费消息</span></span><br><span class="line">message, err := r.channel.Consume(</span><br><span class="line">q.Name,</span><br><span class="line"><span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="literal">true</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>,</span><br><span class="line">)</span><br><span class="line">forever := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> d := <span class="keyword">range</span> message &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Received a message: %s&quot;</span>, d.Body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">fmt.Println(<span class="string">&quot;退出请按 CTRL+C\n&quot;</span>)</span><br><span class="line">&lt;-forever</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewRabbitMQRouting 路由模式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRabbitMQRouting</span><span class="params">(exchangeName <span class="keyword">string</span>, routingKey <span class="keyword">string</span>)</span> *<span class="title">RabbitMQ</span></span> &#123;</span><br><span class="line"><span class="comment">//todo 创建RabbitMQ实例</span></span><br><span class="line">rabbitmq := NewRabbitMQ(<span class="string">&quot;&quot;</span>, exchangeName, routingKey)</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="comment">//todo 获取connection 获取channel</span></span><br><span class="line">rabbitmq.conn, err = amqp.Dial(rabbitmq.Mqurl)</span><br><span class="line">rabbitmq.failOnErr(err, <span class="string">&quot;failed to connect rabbitmq!&quot;</span>)</span><br><span class="line">rabbitmq.channel, err = rabbitmq.conn.Channel()</span><br><span class="line">rabbitmq.failOnErr(err, <span class="string">&quot;failed to open a channel&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> rabbitmq</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PublishRouting 路由模式发送消息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *RabbitMQ)</span> <span class="title">PublishRouting</span><span class="params">(message <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//1.尝试创建交换机</span></span><br><span class="line">err := r.channel.ExchangeDeclare(</span><br><span class="line">r.Exchange,</span><br><span class="line"><span class="string">&quot;direct&quot;</span>,</span><br><span class="line"><span class="literal">true</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">r.failOnErr(err, <span class="string">&quot;Failed to declare an exchange&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.发送消息</span></span><br><span class="line">err = r.channel.Publish(</span><br><span class="line">r.Exchange,</span><br><span class="line"><span class="comment">//要设置</span></span><br><span class="line">r.Key,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line">amqp.Publishing&#123;</span><br><span class="line">ContentType: <span class="string">&quot;text/plain&quot;</span>,</span><br><span class="line">Body:        []<span class="keyword">byte</span>(message),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReceiveRouting 路由模式接受消息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *RabbitMQ)</span> <span class="title">ReceiveRouting</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// todo 试探性创建交换机</span></span><br><span class="line">err := r.channel.ExchangeDeclare(</span><br><span class="line">r.Exchange,</span><br><span class="line"><span class="comment">//交换机类型</span></span><br><span class="line"><span class="string">&quot;direct&quot;</span>,</span><br><span class="line"><span class="literal">true</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>,</span><br><span class="line">)</span><br><span class="line">r.failOnErr(err, <span class="string">&quot;Failed to declare an exchange&quot;</span>)</span><br><span class="line"><span class="comment">// todo 试探性创建队列，这里注意队列名称不要写</span></span><br><span class="line">q, err := r.channel.QueueDeclare(</span><br><span class="line"><span class="string">&quot;&quot;</span>, <span class="comment">//随机生产队列名称</span></span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">true</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>,</span><br><span class="line">)</span><br><span class="line">r.failOnErr(err, <span class="string">&quot;Failed to declare a queue&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定队列到 exchange 中</span></span><br><span class="line">err = r.channel.QueueBind(</span><br><span class="line">q.Name,</span><br><span class="line"><span class="comment">//需要绑定key</span></span><br><span class="line">r.Key,</span><br><span class="line">r.Exchange,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// todo 消费消息</span></span><br><span class="line">message, err := r.channel.Consume(</span><br><span class="line">q.Name,</span><br><span class="line"><span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="literal">true</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>,</span><br><span class="line">)</span><br><span class="line">forever := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> d := <span class="keyword">range</span> message &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Received a message: %s&quot;</span>, d.Body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">fmt.Println(<span class="string">&quot;退出请按 CTRL+C\n&quot;</span>)</span><br><span class="line">&lt;-forever</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewRabbitMQTopic 话题模式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRabbitMQTopic</span><span class="params">(exchangeName <span class="keyword">string</span>, routingKey <span class="keyword">string</span>)</span> *<span class="title">RabbitMQ</span></span> &#123;</span><br><span class="line"><span class="comment">// todo 创建RabbitMQ实例</span></span><br><span class="line">rabbitmq := NewRabbitMQ(<span class="string">&quot;&quot;</span>, exchangeName, routingKey)</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="comment">// todo 获取connection与获取channel</span></span><br><span class="line">rabbitmq.conn, err = amqp.Dial(rabbitmq.Mqurl)</span><br><span class="line">rabbitmq.failOnErr(err, <span class="string">&quot;failed to connect rabbitmq!&quot;</span>)</span><br><span class="line">rabbitmq.channel, err = rabbitmq.conn.Channel()</span><br><span class="line">rabbitmq.failOnErr(err, <span class="string">&quot;failed to open a channel&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> rabbitmq</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PublishTopic 话题模式发送消息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *RabbitMQ)</span> <span class="title">PublishTopic</span><span class="params">(message <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// todo 尝试创建交换机</span></span><br><span class="line">err := r.channel.ExchangeDeclare(</span><br><span class="line">r.Exchange,</span><br><span class="line"><span class="string">&quot;topic&quot;</span>,</span><br><span class="line"><span class="literal">true</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">r.failOnErr(err, <span class="string">&quot;Failed to declare an exchange&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// todo 发送消息</span></span><br><span class="line">err = r.channel.Publish(</span><br><span class="line">r.Exchange,</span><br><span class="line"><span class="comment">//要设置</span></span><br><span class="line">r.Key,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line">amqp.Publishing&#123;</span><br><span class="line">ContentType: <span class="string">&quot;text/plain&quot;</span>,</span><br><span class="line">Body:        []<span class="keyword">byte</span>(message),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReceiveTopic 话题模式接受消息</span></span><br><span class="line"><span class="comment">//要注意key,规则</span></span><br><span class="line"><span class="comment">//其中“*”用于匹配一个单词，“#”用于匹配多个单词（可以是零个）</span></span><br><span class="line"><span class="comment">//匹配 xx.* 表示匹配 xx.hello, 但是 xx.hello.one需要用 xx.#才能匹配到</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *RabbitMQ)</span> <span class="title">ReceiveTopic</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//1.试探性创建交换机</span></span><br><span class="line">err := r.channel.ExchangeDeclare(</span><br><span class="line">r.Exchange,</span><br><span class="line"><span class="comment">//交换机类型</span></span><br><span class="line"><span class="string">&quot;topic&quot;</span>,</span><br><span class="line"><span class="literal">true</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>,</span><br><span class="line">)</span><br><span class="line">r.failOnErr(err, <span class="string">&quot;Failed to declare an exch&quot;</span>+</span><br><span class="line"><span class="string">&quot;ange&quot;</span>)</span><br><span class="line"><span class="comment">//2.试探性创建队列，这里注意队列名称不要写</span></span><br><span class="line">q, err := r.channel.QueueDeclare(</span><br><span class="line"><span class="string">&quot;&quot;</span>, <span class="comment">//随机生产队列名称</span></span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">true</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>,</span><br><span class="line">)</span><br><span class="line">r.failOnErr(err, <span class="string">&quot;Failed to declare a queue&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定队列到 exchange 中</span></span><br><span class="line">err = r.channel.QueueBind(</span><br><span class="line">q.Name,</span><br><span class="line"><span class="comment">//在pub/sub模式下，这里的key要为空</span></span><br><span class="line">r.Key,</span><br><span class="line">r.Exchange,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费消息</span></span><br><span class="line">message, err := r.channel.Consume(</span><br><span class="line">q.Name,</span><br><span class="line"><span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="literal">true</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">forever := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> d := <span class="keyword">range</span> message &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Received a message: %s&quot;</span>, d.Body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;退出请按 CTRL+C\n&quot;</span>)</span><br><span class="line">&lt;-forever</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="各个模式实现">各个模式实现</h3><blockquote><p>因为不确定包的位置</p><p>所以报红简单写一下引入上面的仓库文件就好了</p></blockquote><ol><li>简单模式</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发布者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// todo 创建实例并发送消息</span></span><br><span class="line">rabbitmq := RabbitMQ.NewRabbitMQSimple(<span class="string">&quot;Simple&quot;</span>)</span><br><span class="line">rabbitmq.PublishSimple(<span class="string">&quot;Hello world!&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;发送成功！&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接受者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">rabbitmq := RabbitMQ.NewRabbitMQSimple(<span class="string">&quot;Simple&quot;</span>) <span class="comment">// 名字要一样</span></span><br><span class="line">rabbitmq.ConsumeSimple()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>工作模式</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发布者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">rabbitmq := RabbitMQ.NewRabbitMQSimple(<span class="string">&quot;Simple&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++ &#123;</span><br><span class="line">rabbitmq.PublishSimple(<span class="string">&quot;Hello world!&quot;</span> + strconv.Itoa(i))</span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接受者1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">rabbitmq := RabbitMQ.NewRabbitMQSimple(<span class="string">&quot;Simple&quot;</span>)</span><br><span class="line">rabbitmq.ConsumeSimple()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接受者2</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">rabbitmq := RabbitMQ.NewRabbitMQSimple(<span class="string">&quot;Simple&quot;</span>)</span><br><span class="line">rabbitmq.ConsumeSimple()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>发布模式</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发布者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">rabbitmq := RabbitMQ.NewRabbitMQPubSub(<span class="string">&quot;newProduct&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">rabbitmq.PublishPub(<span class="string">&quot;订阅模式生产第&quot;</span> + strconv.Itoa(i) + <span class="string">&quot;条&quot;</span> + <span class="string">&quot;数据&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;订阅模式生产第&quot;</span> + strconv.Itoa(i) + <span class="string">&quot;条&quot;</span> + <span class="string">&quot;数据&quot;</span>)</span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 订阅者1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">rabbitmq := RabbitMQ.NewRabbitMQPubSub(<span class="string">&quot;newProduct&quot;</span>)</span><br><span class="line">rabbitmq.ReceiveSub()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 订阅者2</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">rabbitmq := RabbitMQ.NewRabbitMQPubSub(<span class="string">&quot;newProduct&quot;</span>)</span><br><span class="line">rabbitmq.ReceiveSub()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>路由模式</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发布者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">One := RabbitMQ.NewRabbitMQRouting(<span class="string">&quot;ex&quot;</span>, <span class="string">&quot;one&quot;</span>)</span><br><span class="line">Two := RabbitMQ.NewRabbitMQRouting(<span class="string">&quot;ex&quot;</span>, <span class="string">&quot;two&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">One.PublishRouting(<span class="string">&quot;Hello one!&quot;</span> + strconv.Itoa(i))</span><br><span class="line">Two.PublishRouting(<span class="string">&quot;Hello Two!&quot;</span> + strconv.Itoa(i))</span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接受者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">One := RabbitMQ.NewRabbitMQRouting(<span class="string">&quot;ex&quot;</span>, <span class="string">&quot;one&quot;</span>)</span><br><span class="line">One.ReceiveRouting()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接受者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">Two := RabbitMQ.NewRabbitMQRouting(<span class="string">&quot;ex&quot;</span>, <span class="string">&quot;two&quot;</span>)</span><br><span class="line">Two.ReceiveRouting()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>话题模式</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发布者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">One := RabbitMQ.NewRabbitMQTopic(<span class="string">&quot;exTopic&quot;</span>, <span class="string">&quot;topic.one&quot;</span>)</span><br><span class="line">Two := RabbitMQ.NewRabbitMQTopic(<span class="string">&quot;exTopic&quot;</span>, <span class="string">&quot;topic.two&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">One.PublishTopic(<span class="string">&quot;Hello topic one!&quot;</span> + strconv.Itoa(i))</span><br><span class="line">Two.PublishTopic(<span class="string">&quot;Hello topic Two!&quot;</span> + strconv.Itoa(i))</span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接受者1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">One := RabbitMQ.NewRabbitMQTopic(<span class="string">&quot;exTopic&quot;</span>, <span class="string">&quot;#&quot;</span>) <span class="comment">// # 表示一个或者多个词语</span></span><br><span class="line">One.ReceiveTopic()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接受者2</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">Two := RabbitMQ.NewRabbitMQTopic(<span class="string">&quot;exTopic&quot;</span>, <span class="string">&quot;*.two&quot;</span>) <span class="comment">// 表示多个词语</span></span><br><span class="line">Two.ReceiveTopic()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Pygame实现小球躲避</title>
      <link href="/article/72f74028.html"/>
      <url>/article/72f74028.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言：-4">前言：</h2><p>这学期的Python课，要写代码是真的多…</p><p>课程实验一是一个五子棋，但是发了代码。</p><p>至于代码质量嘛～  我直接全部根据自己划分的结构改了</p><p>这里吐槽下 (真的发下来的代码 惨不忍睹 )</p><p>我改了快4个小时 后面功能不想加了…</p><p>这次是自己写嘛～ 那就写个想样的。</p><h2 id="结构划分">结构划分</h2><p>我分为了</p><ul><li>run  入口</li><li>setting  设置</li><li>main 主逻辑</li><li>utils 仓库</li></ul><p>其实我想的是：全部设置到页面上去，但是偷懒～ （期末要去弄绩点）</p><p>直接开始贴代码</p><h3 id="run-py"><a href="http://run.py">run.py</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> main <span class="keyword">import</span> main</span><br><span class="line"></span><br><span class="line">banner = <span class="string">&quot;&quot;&quot; ____        _ _ _____          </span></span><br><span class="line"><span class="string">| __ )  __ _| | | ____|___  ___ </span></span><br><span class="line"><span class="string">|  _ \ / _` | | |  _| / __|/ __|</span></span><br><span class="line"><span class="string">| |_) | (_| | | | |___\__ \ (__ </span></span><br><span class="line"><span class="string">|____/ \__,_|_|_|_____|___/\___|</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(banner)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Author: HengYi&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] 简单：输入 1&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] 普通：输入 2&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] 困难：输入 3&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请选择难度：&quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> num <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]:</span><br><span class="line">            main(num)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;无法处理～&quot;</span>)</span><br><span class="line">            sys.exit()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;无法处理～&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="setting-py"><a href="http://setting.py">setting.py</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">WIDTH = <span class="number">900</span>  <span class="comment"># 宽</span></span><br><span class="line">HEIGHT = <span class="number">600</span>  <span class="comment"># 高</span></span><br><span class="line">SCORE = <span class="number">0</span>  <span class="comment"># 分数</span></span><br><span class="line">TIME = <span class="number">0</span>  <span class="comment"># 时间</span></span><br><span class="line">FIRST_STEP = <span class="number">10</span>  <span class="comment"># 到达第二关时间</span></span><br><span class="line">SECOND_STEP = <span class="number">20</span>  <span class="comment"># 到达第三关时间</span></span><br><span class="line">FPS = <span class="number">60</span>  <span class="comment"># 刷新率</span></span><br><span class="line">BG_COLOR = (<span class="number">255</span>, <span class="number">239</span>, <span class="number">213</span>)  <span class="comment"># 背景颜色</span></span><br></pre></td></tr></table></figure><h3 id="utils-py"><a href="http://utils.py">utils.py</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> setting <span class="keyword">import</span> FIRST_STEP, SECOND_STEP, BG_COLOR, WIDTH, HEIGHT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note: 根据难度生成对应的小球</span></span><br><span class="line"><span class="comment"># Time: 2021/12/17 8:35 下午</span></span><br><span class="line"><span class="comment"># Author: HengYi</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ballNum</span>(<span class="params">ladderNum, time</span>):</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> FIRST_STEP &lt;= time &lt; SECOND_STEP:</span><br><span class="line">        index = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> SECOND_STEP &lt;= time:</span><br><span class="line">        index = <span class="number">2</span></span><br><span class="line">    numMap = [</span><br><span class="line">        [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">        [<span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> numMap[ladderNum - <span class="number">1</span>][index]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note: 根据小球个数设置防止误触时间</span></span><br><span class="line"><span class="comment"># Time: 2021/12/17 8:43 下午</span></span><br><span class="line"><span class="comment"># Author: HengYi</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">protectTime</span>(<span class="params">ballsNum</span>):</span></span><br><span class="line">    <span class="keyword">if</span> ballsNum <span class="keyword">in</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note: 根据时间设置小球大小</span></span><br><span class="line"><span class="comment"># Time: 2021/12/17 8:58 下午</span></span><br><span class="line"><span class="comment"># Author: HengYi</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">howBigBallIs</span>(<span class="params">ladderNum, time</span>):</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> FIRST_STEP &lt;= time &lt; SECOND_STEP:</span><br><span class="line">        index = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> SECOND_STEP &lt;= time:</span><br><span class="line">        index = <span class="number">2</span></span><br><span class="line">    numMap = [</span><br><span class="line">        [<span class="number">25</span>, <span class="number">20</span>, <span class="number">15</span>],</span><br><span class="line">        [<span class="number">24</span>, <span class="number">20</span>, <span class="number">16</span>],</span><br><span class="line">        [<span class="number">26</span>, <span class="number">20</span>, <span class="number">16</span>]</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> numMap[ladderNum - <span class="number">1</span>][index]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note: 根据时间难度计算球体的大小和速度</span></span><br><span class="line"><span class="comment"># Time: 2021/12/17 9:15 下午</span></span><br><span class="line"><span class="comment"># Author: HengYi</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judgeDiff</span>(<span class="params">ladderNum, time</span>):</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> FIRST_STEP &lt;= time &lt; SECOND_STEP:</span><br><span class="line">        index = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> SECOND_STEP &lt;= time:</span><br><span class="line">        index = <span class="number">2</span></span><br><span class="line">    numMap = [</span><br><span class="line">        [(<span class="number">30</span>, <span class="number">30</span>, <span class="number">3.5</span>, <span class="number">3.5</span>), (<span class="number">28</span>, <span class="number">28</span>, <span class="number">6</span>, <span class="number">6</span>), (<span class="number">26</span>, <span class="number">26</span>, <span class="number">9</span>, <span class="number">9</span>)],</span><br><span class="line">        [(<span class="number">30</span>, <span class="number">30</span>, <span class="number">4.5</span>, <span class="number">4.5</span>), (<span class="number">27</span>, <span class="number">27</span>, <span class="number">8</span>, <span class="number">8</span>), (<span class="number">25</span>, <span class="number">25</span>, <span class="number">10</span>, <span class="number">10</span>)],</span><br><span class="line">        [(<span class="number">30</span>, <span class="number">30</span>, <span class="number">5</span>, <span class="number">5</span>), (<span class="number">26</span>, <span class="number">26</span>, <span class="number">9</span>, <span class="number">9</span>), (<span class="number">24</span>, <span class="number">24</span>, <span class="number">12</span>, <span class="number">12</span>)]</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> numMap[ladderNum - <span class="number">1</span>][index]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note: 创建平台窗口</span></span><br><span class="line"><span class="comment"># Time: 2021/12/17 2:58 下午</span></span><br><span class="line"><span class="comment"># Author: HengYi</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeGameBg</span>(<span class="params">width, height</span>):</span></span><br><span class="line">    pygame.init()</span><br><span class="line">    screen = pygame.display.set_mode((width, height))  <span class="comment"># 设置窗口大小</span></span><br><span class="line">    pygame.display.set_caption(<span class="string">&#x27;小球逃逃逃&#x27;</span>)  <span class="comment"># 设置窗口标题</span></span><br><span class="line">    background = pygame.Surface(screen.get_size())  <span class="comment"># 填充背景</span></span><br><span class="line">    <span class="keyword">return</span> screen, background</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note: 添加小球产生的事件</span></span><br><span class="line"><span class="comment"># Time: 2021/12/17 3:06 下午</span></span><br><span class="line"><span class="comment"># Author: HengYi</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ballCome</span>():</span></span><br><span class="line">    COME_AGAIN = pygame.USEREVENT</span><br><span class="line">    pygame.time.set_timer(COME_AGAIN, <span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">return</span> COME_AGAIN</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note: 提示字体</span></span><br><span class="line"><span class="comment"># Time: 2021/12/17 3:11 下午</span></span><br><span class="line"><span class="comment"># Author: HengYi</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeTips</span>(<span class="params">content, size, color, position, screen</span>):</span></span><br><span class="line">    font = pygame.font.SysFont(<span class="string">&#x27;arial&#x27;</span>, size)</span><br><span class="line">    text_sf = font.render(content, <span class="literal">True</span>, color, BG_COLOR)</span><br><span class="line">    screen.blit(text_sf, position)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note: 字体展示</span></span><br><span class="line"><span class="comment"># Time: 2021/12/18 4:20 下午</span></span><br><span class="line"><span class="comment"># Author: HengYi</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span>(<span class="params">screen, SCORE, TIME</span>):</span></span><br><span class="line">    screen.fill(BG_COLOR)  <span class="comment"># 防止出现拖影</span></span><br><span class="line">    makeTips(<span class="string">&#x27;SCORE: &#x27;</span>, <span class="number">30</span>, (<span class="number">34</span>, <span class="number">139</span>, <span class="number">34</span>), (<span class="number">5</span>, <span class="number">40</span>), screen)</span><br><span class="line">    makeTips(<span class="string">&#x27;TIME(s): &#x27;</span>, <span class="number">30</span>, (<span class="number">64</span>, <span class="number">158</span>, <span class="number">255</span>), (<span class="number">5</span>, <span class="number">75</span>), screen)</span><br><span class="line">    makeTips(<span class="built_in">str</span>(<span class="built_in">int</span>(SCORE)), <span class="number">30</span>, (<span class="number">34</span>, <span class="number">139</span>, <span class="number">34</span>), (<span class="number">135</span>, <span class="number">40</span>), screen)</span><br><span class="line">    makeTips(<span class="built_in">str</span>(<span class="built_in">int</span>(TIME)), <span class="number">30</span>, (<span class="number">64</span>, <span class="number">158</span>, <span class="number">255</span>), (<span class="number">135</span>, <span class="number">75</span>), screen)</span><br><span class="line">    <span class="keyword">if</span> TIME <span class="keyword">in</span> [FIRST_STEP, FIRST_STEP + <span class="number">1</span>]:</span><br><span class="line">        makeTips(<span class="string">&#x27;Ops! LEVEL_2~&#x27;</span>, <span class="number">30</span>, (<span class="number">60</span>, <span class="number">179</span>, <span class="number">113</span>), (WIDTH / <span class="number">2</span> - <span class="number">30</span> * <span class="number">3.5</span>, HEIGHT / <span class="number">2</span> - <span class="number">50</span>), screen)</span><br><span class="line">    <span class="keyword">elif</span> TIME <span class="keyword">in</span> [SECOND_STEP, SECOND_STEP + <span class="number">1</span>]:</span><br><span class="line">        makeTips(<span class="string">&#x27;Congratulations! LEVEL_3&#x27;</span>, <span class="number">25</span>, (<span class="number">60</span>, <span class="number">179</span>, <span class="number">113</span>), (WIDTH / <span class="number">2</span> - <span class="number">25</span> * <span class="number">6.25</span>, HEIGHT / <span class="number">2</span> - <span class="number">50</span>), screen)</span><br></pre></td></tr></table></figure><h3 id="Main-py"><a href="http://Main.py">Main.py</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> setting <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ball</span>(<span class="params">pygame.sprite.Sprite</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, *keys</span>):</span>  <span class="comment"># 创建球</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.timeSec = <span class="number">0</span></span><br><span class="line">        w, h, xs, ys = keys[<span class="number">0</span>]</span><br><span class="line">        self.w = w</span><br><span class="line">        self.h = h</span><br><span class="line">        self.xs = xs</span><br><span class="line">        self.ys = ys</span><br><span class="line">        x = random.randint(<span class="number">0</span>, WIDTH - self.w)</span><br><span class="line">        y = random.randint(<span class="number">0</span>, HEIGHT - self.h)</span><br><span class="line">        self.rect = pygame.Rect(x, y, self.w * <span class="number">2</span>, self.h * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, screen, *args</span>):</span></span><br><span class="line">        <span class="comment"># 根据设置的速度进行运动</span></span><br><span class="line">        self.rect.x += self.xs</span><br><span class="line">        self.rect.y += self.ys</span><br><span class="line">        <span class="comment"># 当遇到墙的时候进行反弹</span></span><br><span class="line">        <span class="keyword">if</span> self.rect.x &gt; WIDTH - self.w <span class="keyword">or</span> self.rect.x &lt; <span class="number">0</span>:</span><br><span class="line">            self.xs = -self.xs</span><br><span class="line">        <span class="keyword">elif</span> self.rect.y &gt; HEIGHT - self.h <span class="keyword">or</span> self.rect.y &lt; <span class="number">0</span>:</span><br><span class="line">            self.ys = -self.ys</span><br><span class="line">        <span class="keyword">if</span> self.timeSec &lt;= args[<span class="number">0</span>]:</span><br><span class="line">            pygame.draw.rect(screen, (<span class="number">100</span>, <span class="number">149</span>, <span class="number">237</span>), [self.rect.x, self.rect.y, self.rect.w, self.rect.h], <span class="number">2</span>)</span><br><span class="line">        pygame.draw.circle(screen, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), [self.rect.center[<span class="number">0</span>], self.rect.center[<span class="number">1</span>]], self.w)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">timerAdd</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.timeSec += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.timeSec</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span>  <span class="comment"># 销毁的时候</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mouse</span>(<span class="params">pygame.sprite.Sprite</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, *keys</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.size = keys[<span class="number">0</span>]  <span class="comment"># 设置圆的大小</span></span><br><span class="line">        self.rect = pygame.Rect(WIDTH / <span class="number">2</span> - self.size, HEIGHT / <span class="number">2</span> - self.size, self.size * <span class="number">2</span>, self.size * <span class="number">2</span>)  <span class="comment"># 实则是一个正方形</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, screen, *args</span>):</span></span><br><span class="line">        <span class="keyword">if</span> pygame.mouse.get_focused():  <span class="comment"># 如果存在于页面内</span></span><br><span class="line">            self.rect.center = pygame.mouse.get_pos()</span><br><span class="line">        <span class="comment"># 限制球不能半身跑到边框上</span></span><br><span class="line">        <span class="keyword">if</span> self.rect.x &lt; <span class="number">0</span>:</span><br><span class="line">            self.rect.x = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> self.rect.x &gt; WIDTH - self.rect.w:</span><br><span class="line">            self.rect.x = WIDTH - self.rect.w</span><br><span class="line">        <span class="keyword">elif</span> self.rect.y &lt; <span class="number">0</span>:</span><br><span class="line">            self.rect.y = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> self.rect.y &gt; HEIGHT - self.rect.h:</span><br><span class="line">            self.rect.y = HEIGHT - self.rect.h</span><br><span class="line">        pygame.draw.circle(screen, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), [self.rect.center[<span class="number">0</span>], self.rect.center[<span class="number">1</span>]], self.size)  <span class="comment"># 根据圆心画圆</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">ladderNum</span>):</span></span><br><span class="line">    <span class="comment"># -------------------画布初始化-----------------------</span></span><br><span class="line">    screen, background = makeGameBg(WIDTH, HEIGHT)</span><br><span class="line">    clock = pygame.time.Clock()</span><br><span class="line">    comeAgain = ballCome()</span><br><span class="line">    <span class="comment"># --------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># --------------------对象存储-------------------------</span></span><br><span class="line">    <span class="keyword">global</span> TIME, SCORE</span><br><span class="line">    balls = pygame.sprite.Group(Ball(judgeDiff(ladderNum, TIME)))</span><br><span class="line">    mouse = Mouse(howBigBallIs(ladderNum, TIME))</span><br><span class="line">    mouseObject = pygame.sprite.Group(mouse)</span><br><span class="line">    <span class="comment"># --------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------------游戏主程序-----------------------</span></span><br><span class="line">    RUNNING = <span class="literal">True</span></span><br><span class="line">    SHOWINFO = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        draw(screen, SCORE, TIME)  <span class="comment"># 动态添加文字</span></span><br><span class="line">        <span class="keyword">if</span> SHOWINFO:</span><br><span class="line">            makeTips(<span class="string">&#x27;Please Press The Space To Restart&#x27;</span>, <span class="number">30</span>, (<span class="number">255</span>, <span class="number">99</span>, <span class="number">71</span>), (WIDTH / <span class="number">2</span> - <span class="number">240</span>, HEIGHT / <span class="number">2</span> - <span class="number">50</span>),</span><br><span class="line">                     screen)</span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> balls:</span><br><span class="line">            <span class="keyword">if</span> pygame.sprite.spritecollide(each, mouseObject, <span class="literal">False</span>, collided=<span class="literal">None</span>) <span class="keyword">and</span> each.timeSec &gt; <span class="number">2</span>:</span><br><span class="line">                RUNNING = <span class="literal">False</span></span><br><span class="line">                SHOWINFO = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">                pygame.quit()</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.KEYDOWN:  <span class="comment"># 重新开始</span></span><br><span class="line">                <span class="keyword">if</span> event.key == pygame.K_SPACE:</span><br><span class="line">                    SCORE = <span class="number">0</span></span><br><span class="line">                    TIME = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">for</span> each <span class="keyword">in</span> balls.sprites():</span><br><span class="line">                        balls.remove(each)</span><br><span class="line">                    SHOWINFO = <span class="literal">False</span></span><br><span class="line">                    RUNNING = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> event.<span class="built_in">type</span> == comeAgain <span class="keyword">and</span> RUNNING:  <span class="comment"># 每秒增加</span></span><br><span class="line">                TIME += <span class="number">1</span></span><br><span class="line">                ballsNum = ballNum(ladderNum, TIME)</span><br><span class="line">                diff = judgeDiff(ladderNum, TIME)</span><br><span class="line">                SCORE += (ballsNum * diff[<span class="number">3</span>])</span><br><span class="line">                <span class="keyword">if</span> TIME <span class="keyword">in</span> [<span class="number">10</span>, <span class="number">20</span>]:</span><br><span class="line">                    mouseObject.remove(mouseObject.sprites()[<span class="number">0</span>])</span><br><span class="line">                    mouseObject.add(Mouse(howBigBallIs(ladderNum, TIME)))</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(balls) &lt; ballsNum:</span><br><span class="line">                    balls.add(Ball(diff))</span><br><span class="line">                <span class="keyword">for</span> each <span class="keyword">in</span> balls:  <span class="comment"># 防止误触的保护罩</span></span><br><span class="line">                    each.timerAdd()</span><br><span class="line">        balls.update(screen, protectTime(ballNum(ladderNum, TIME)))</span><br><span class="line">        mouseObject.update(screen)</span><br><span class="line">        clock.tick(FPS)</span><br><span class="line">        pygame.display.update()  <span class="comment"># 刷新</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;游戏结束&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="总结-2">总结</h2><h3 id="效果图：">效果图：</h3><img src="/img/ballResult.webp" alt="效果图" style="zoom:40%;" /><h3 id="如何食用：">如何食用：</h3><p>把上面4处代码Copy下来在用<code>run.py</code>启动</p><p>里面设计的 如何判断；如何重来；… (我觉得我的变量名字已经够清楚了🐶)</p><p>欢迎与我交流，讨论。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>付费视频下载到本地,关于ts与m3u8文件下载后的复盘总结</title>
      <link href="/article/ba582517.html"/>
      <url>/article/ba582517.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言：-6">前言：</h2><p>一切的起因：因为某个同学在某斯上面的会员快要过期了，想把视频下载到本地观看。<br>我想这还不简单？愉快的接下了任务，接下来，我想我是笑不出来了，但是走过来还是值得。</p><h2 id="求助插件">求助插件</h2><h3 id="You-Get">You-Get</h3><blockquote><p>会Python的应该都听说过<code>you-get</code>吧，就是支持大多数视频的下载<br>这里我直接放上开源地址：<code>https://github.com/soimort/you-get</code><br>B站的视频你想下载下来直接用这个多线程跑就行了。</p></blockquote><h3 id="Flash-Video-Downloader">Flash Video Downloader</h3><blockquote><p>一个在<code>Chrome</code>上的插件，不用说了没用。</p></blockquote><h3 id="Video-DownloadHelper">Video DownloadHelper</h3><blockquote><p>一个在Firefox上的插件，第一次还检测到了<br>然后刷新页面，哦豁没了，逐渐开始变态起来~</p></blockquote><h2 id="分析网络请求">分析网络请求</h2><h3 id="第一步">第一步</h3><ol><li>打开F12</li><li>刷新network</li><li>默认观察的是请求的先后顺序</li></ol><blockquote><p>我选择大小之后，随着视频的播放，逐渐产生新的文件<br>因为是大小倒序，0.ts,1.ts逐渐出现<br>那说明了这个视频的播放就是一个个这样的ts组成的</p></blockquote><img src="/img/mics/d41104a297d24a6c8a135cc323e91fab.webp" alt="" style="zoom:80%;" /><h3 id="第二步">第二步</h3><blockquote><p>我接着去请教某位小透明，在他的带领下我明白了，可以找到一个m3u8的文件<br>这个文件的含义相当于整个视频的总指挥<br>他里面集合了所有的ts，以及如何加密，密钥来自哪里<br>那么如何找呢？</p></blockquote><img src="/img/mics/11ffc258ec544beda68928ede0de4c2d.webp" alt="" style="zoom:80%;" /><h3 id="第三步">第三步</h3><blockquote><p>因为他这个涉及登录的，所以肯定会携带token等认证信息，注意留意这个<br>其次加载一个网页，首先会加载css，js，图片等先将整个网站的样子加载出来<br>随后就是js的渲染解码的问题，这个时候就会发出请求m3u8<br>所以根据waterfall来排序，拉到中间，就能发现上图。</p></blockquote><img src="/img/mics/55c844a3923747aea50844d2532ebb4f.webp" alt="" style="zoom:80%;" /><blockquote><p>进而他在里面说明了是AES-128加密<br>然后密钥对应的地址是URI中的<br>当然你直接访问肯定是不行的，自己造包又太麻烦<br>而网页能播放视频，说明密钥肯定也下发了<br>然后网站的js根据key和m3u8请求服务器并解密，前端就能观看到视频了</p></blockquote><img src="/img/mics/34f9e6e453a04b6093000d939d60deca.webp" alt="" style="zoom:80%;" /><blockquote><p>这里有个需要注意的地方，我下面单独说一下</p></blockquote><h3 id="来个小总结">来个小总结</h3><blockquote><p>网站是怎么播放视频的呢：</p><ol><li>他是拆分成30秒一个的ts文件</li><li>网站的js会去读取请求来的m3u8文件</li><li>进而js会根据key解密</li><li>直接请求m3u8和key是会被服务器拒绝的</li></ol><p>综上：<br>我们要将m3u8和key拉取到本地<br>用本地的服务器给我们的工具给可以直接访问到的链接<br>然后我们就能得到我们想要的视频了</p></blockquote><h2 id="如何处理加密key">如何处理加密key</h2><ul><li>使用火狐浏览器</li></ul><blockquote><p>这点值得谷歌浏览器学习哈，自动转码</p></blockquote><ul><li>使用hackbar</li></ul><blockquote><p>有的火狐浏览器是不会自动转码的，如果只存在一行，可以直接复制<br>到hackbar里面的base64_encode拿到</p></blockquote><ul><li>如果存在换行怎么办？</li></ul><img src="/img/mics/f5e7026473bb4b2aaf10ab9bc83c8020.webp" alt="" style="zoom:80%;" /><blockquote><ol><li>burpsuit抓包 找到这个包的response到解码器里面解</li><li>右键改包的curl命令，到控制台里面发包处理返回回来的二进制（没试过~）</li></ol></blockquote><img src="/img/mics/6c4d1be297874684867ca654f08823ad.webp" alt="" style="zoom:80%;" /><ul><li>最后生成key文件</li></ul><blockquote><p>你直接复制是没有用的，二进制当成字符串用~<br>如下你会得到对应的key</p></blockquote><img src="/img/mics/5cf1ec0d14f34c0db6fe738031d41a12.webp" alt="" style="zoom:80%;" /><p><code>file_put_contents('./key', base64_decode('DQoNCtL+6IOzUNCrR/OBXiRkDek='));</code></p><h2 id="开始转视频">开始转视频</h2><h3 id="m3u8dl工具">m3u8dl工具</h3><blockquote><p>开源地址：<a href="https://github.com/nilaoda/N_m3u8DL-CLI">https://github.com/nilaoda/N_m3u8DL-CLI</a><br>但是这个在这里不是特别好使</p></blockquote><h3 id="youtu-dl-工具">youtu-dl 工具</h3><blockquote><p>开源地址 ： <a href="https://github.com/ytdl-org/youtube-dl">https://github.com/ytdl-org/youtube-dl</a><br>最后直接搞定！</p></blockquote><h3 id="ffmpeg-根本">ffmpeg 根本</h3><blockquote><p>下载地址：<a href="https://www.gyan.dev/ffmpeg/builds/">https://www.gyan.dev/ffmpeg/builds/</a></p></blockquote><blockquote><p>上面的建议都要加入环境变量<br>而我就比较懒<br>直接丢到<code>site-pakage</code>里面了事<br>注意：ffmpeg有很多阉割版，建议用上面的下载地址下载完成版</p></blockquote><img src="/img/mics/dcb925840718489c8986a0d91e7e6925.webp" alt="" style="zoom:80%;" /><h3 id="地址">地址</h3><blockquote><p>还记得前面我们说过的，网站上的地址是要token认证的<br>而软件的使用是直接给个链接<br>加上有几点我们可以利用</p><ol><li>m3u8文件是没有加密的</li><li>ts文件是直接可以拿下来的</li></ol><p>所以我们可以将m3u8拿到本地，给本地连接</p></blockquote><p><strong>这里直接提供几种方式：</strong></p><ol><li>XAMPP，PHPstudy等本地开个服务器，丢到里面</li></ol><img src="/img/mics/de79ea9ef4de450cb9b45cac035c0abc.webp" alt="" style="zoom:80%;" /><img src="/img/mics/4ddbaa87db2342d59a9a8c50539f2f58.webp" alt="" style="zoom:80%;" /><ol start="2"><li>python -m http.server</li></ol><blockquote><p>用python搭建一个临时虚拟的服务器<br>给连接参考下：<br><code>https://www.cnblogs.com/shenshangzz/p/8318143.html</code><br><code>https://juejin.cn/s/python%20http%20server%E6%95%99%E7%A8%8B</code><br><code>https://www.pythonf.cn/read/4681</code></p></blockquote><ol start="3"><li>白嫖图床</li></ol><blockquote><p>咳咳咳,小透明大佬的百宝箱中的东西<br><code>https://github.com/TransparentLC/free-img</code><br>这是个好玩意，大厂们也不差这点</p></blockquote><h2 id="最后一步">最后一步</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前文件夹下打开cmd</span></span><br><span class="line"></span><br><span class="line">$ youtu-dl http://127.0.0.1:8112/index.m3u8</span><br></pre></td></tr></table></figure><img src="/img/mics/40df08a49ae7427abde6eadedf6d78ff.webp" alt="" style="zoom:80%;" /><img src="/img/mics/7c3312832673453fbcd18c53c8d286a8.webp" alt="" style="zoom:80%;" />搞定！]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>树莓派超全介绍合集：2021 从0到1！</title>
      <link href="/article/b2e16fb3.html"/>
      <url>/article/b2e16fb3.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言：-9">前言：</h2><p>本人大学生，弄树莓派是因为想架设<strong>私人服务器</strong>。<br>掌握了一定的<strong>Linux基础</strong>，现在我分享一下自己的从0到1的路程，大家可以根据目录有选择性的参考，<br>若有疑问 请通过邮件/下方留言联系我</p><h2 id="步骤：">步骤：</h2><h3 id="淘宝购买配件">淘宝购买配件</h3><table><thead><tr><th>参考</th><th>价格</th></tr></thead><tbody><tr><td>4B-4GB</td><td>415</td></tr><tr><td>亚克力盒子加风扇</td><td>17</td></tr><tr><td>64G内存卡加读卡器</td><td>34</td></tr><tr><td>电源加散热</td><td>18</td></tr></tbody></table><blockquote><p>这个价格我也仅能供大家参考，市场随时都在变的，然后建议不要买一套</p></blockquote><h3 id="下载系统和烧系统">下载系统和烧系统</h3><blockquote><p>可以在这里<a href="https://www.raspberrypi.org/software/operating-systems/">树莓派官方网站</a>下载系统<br>大佬们可以选择更多版本的，但如果不玩花的这个也就够了。</p></blockquote><hr><blockquote><p>烧系统的话，大家在进行每一步的时候尽量小心点，因为这玩意不存在快照，一不小心又要重来</p><ul><li>先将SD卡格式化干干净净</li><li>准备好烧系统的软件开始烧系统</li><li>烧好的系统会被分成2个区域，所以不要觉得出错了</li><li>因最新版的树莓派没有开ssh，所以，打开烧录完系统的sd卡，新建一个名为ssh，<strong>无后缀的文件</strong>。</li></ul></blockquote><blockquote><p>推荐的烧录软件：Win32Disklmager</p></blockquote><img src="/img/mics/1c52697ee374467bbae9e62ef6a3aa0e.webp" alt="" style="zoom:80%;" /><hr><h3 id="开始连接">开始连接</h3><ul><li>最简单的一种就是插入路由器</li><li>也可以笔记本接无线网，树莓派接笔记本，但是要在网络管理中心改一下（手机热点）</li><li>也可以台式接网线，树莓派接台式（锐捷什么的会判断你外接判断为外挂）</li><li>所以不要急，方法总比困难多</li></ul><blockquote><ul><li>反正最后就是你的电脑和你的树莓派构成了网络群，内网去找树莓派的IP地址</li><li>找IP地址可以用端口扫描软件扫描，也可以使用cmd</li><li>使用cmd   先是查看自己的内网ip 然后同一网段下去找树莓派的ip地址</li><li>cmd 2个命令 ipconfig 与 arp -a</li></ul></blockquote><ul><li>去PuTTY<a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">官网下载</a>好了，开始ssh连接</li></ul><hr><h3 id="开始登录">开始登录</h3><p><strong>默认账号</strong>为<strong>pi</strong>，<strong>密码</strong>为<strong>raspberry</strong>,在后面会有机会改密码的，先用着。</p><ul><li>安装vncserver</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install tightvncserver</span><br></pre></td></tr></table></figure><ul><li>安装xrdp</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install xrdp</span><br></pre></td></tr></table></figure><ul><li>安装xrdp</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vnc4server tightvncserver</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 网速会慢一点，稍后会进行换源</p><ul><li>为了以后能进行VNC</li><li>sudo raspi-config -&gt; InterFace Option -&gt;VNC -&gt; enable</li><li>登录远程桌面（<strong>win+R</strong>） 输入你的pi 然后账号密码都是默认的</li><li>进入后根据操作，会配置好基础设置，包括密码</li><li>以下操作建议在图形界面的终端操作（效果差不多）<br><img src="/img/mics/2708b483093a4435824de2e7d2c4575b.webp" alt="" style="zoom:80%;" /></li></ul><h3 id="设置中文字体">设置中文字体</h3><ul><li>安装字库</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ttf-wqy-zenhei</span><br></pre></td></tr></table></figure><ul><li>安装拼音输入法</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install fcitx fcitx-googlepinyin fcitx-module-cloudpinyin fcitx-sunpinyin</span><br></pre></td></tr></table></figure><ul><li>配置中文环境</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure> <img src="/img/mics/0adae36ba405473fba509cdeefb9452f.webp" alt="" style="zoom:80%;" /><blockquote><p>再选择local 然后找到zh_CN.UTF-8,直接按空格选取，然后按tab键确认。<br>怎么进来的就要完完整整地推出<br>最后重启</p></blockquote> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><h3 id="设置root用户和配置时间">设置root用户和配置时间</h3><ul><li>给root设置密码</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root </span><br></pre></td></tr></table></figure><ul><li>进入root</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - </span><br></pre></td></tr></table></figure><ul><li>切换回普通pi</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - pi</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>:输入密码的时候不会显示的，所以跟着感觉输入回车就好了。</li><li>输错了也不要乱按！卡死了这不是云服务器，不好搞。</li><li>到此已经进入root用户下了，我们必须配置时间，为换源做准备。</li><li>设置时间</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date -s &#x27;2021-7-30 xx:xx:xx&#x27;</span><br></pre></td></tr></table></figure><ul><li>将时间写入bios避免重启失效。</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hwclock -w</span><br></pre></td></tr></table></figure><h3 id="换源">换源</h3><blockquote><p><strong>时间不对是不成功的</strong></p></blockquote><ul><li>备份软件源</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">sudo cp /etc/apt/sources.list.d/raspi.list /etc/apt/sources.list.d/raspi.list.bak</span><br></pre></td></tr></table></figure><ul><li>修改软件更新源 配置文件</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano  /etc/apt/sources.list</span><br></pre></td></tr></table></figure><ul><li>用#注释原文内容，加入</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.ustc.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi</span><br></pre></td></tr></table></figure><ul><li>修改系统更新源 配置文件</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/apt/sources.list.d/raspi.list</span><br></pre></td></tr></table></figure><ul><li>用#注释原文内容，加入</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui</span><br></pre></td></tr></table></figure><ul><li>树莓派更新信息数据</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h3 id="打通防火墙（建站）">打通防火墙（建站）</h3><ul><li>安装管理</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ufw</span><br></pre></td></tr></table></figure><ul><li>启用</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw enable</span><br></pre></td></tr></table></figure><ul><li>查看防火墙状态</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure><ul><li>允许外部访问80端口</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow 80</span><br></pre></td></tr></table></figure><blockquote><p>80：默认端口 3306：数据库端口 8888：宝塔面板端口<br>其实有了宝塔面板之后可以在那上面打开，这里打开是为了能够安装宝塔面板</p></blockquote><h3 id="安装宝塔">安装宝塔</h3><ul><li>安装命令</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; bash install.sh</span><br></pre></td></tr></table></figure><ul><li><strong>注意：我已经忘了具体的命令了（应该是ubuntu版的）</strong></li><li><strong>实在把握不住就百度搜索宝塔面板到官网看看</strong></li></ul><blockquote><ul><li>安装好了会弹出内外网入口</li><li>这里选择内网入口，在图形界面选择默认浏览器打开</li><li>输入账号和密码就行了</li><li>选择你对应的版本（这将会消耗很长段时间）</li><li>之后就跟阿里云，腾讯云一模一样了。</li></ul></blockquote><h3 id="内网穿透">内网穿透</h3><p>下载地址：<a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a><br>下载版本：<br><img src="/img/mics/58d95b3515b64797846e9ba00b1c0dc6.webp" alt="" style="zoom:80%;" /></p><p>这里有几个注意点：</p><ul><li>内网想在外网访问：那么你的树莓派就是客户端</li><li>应该配置frp文件（具体详细配置麻烦大家自行百度下）</li></ul><img src="/img/mics/47b051e8b7a04e98b6f09d931a185dd8.webp" alt="" style="zoom:80%;" /><p>什么意思呢？就是以后你的ssh登录就可以用 你的ip地址的7999端口来进行登录了</p><blockquote><p>服务端：<br><img src="/img/mics/5bbfb4f9078249e9bfbb4b296fad3188.webp" alt="" style="zoom:80%;" /></p></blockquote><p>这里<strong>仅供参考</strong>，想怎么穿透，得花点时间学习下（学习成本很小）</p><ul><li>切换到root下</li><li>创建子窗口，此时进入了当前路径下的子窗口</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">screen -S frp</span><br><span class="line"> ll</span><br></pre></td></tr></table></figure><ul><li>启动</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure><ul><li>一起按ctrl + a + d 回到主界面</li><li>先开启公网的，再开启内网的</li><li>只要不重启，这个后台程序就会一直跑下去</li></ul><blockquote><p>如果访问不成功，查看对应的端口是否开启，在子窗口也会报错原因的<br>内网的树莓派在宝塔面包操作就好了<br>外网的阿里云在宝塔面板开启我记得是不行的，得到官方控制台下的安全组打开才行</p></blockquote><h3 id="安装个人云盘">安装个人云盘</h3><img src="/img/mics/3b6b20e887f94a66b18976d3723a285b.webp" alt="" style="zoom:80%;" /><blockquote><p>宝塔面板-》软件商店-》一键部署-》可道云<br>注意下端口号，然后内网穿透即可<br>访问地址 你的外网IP:穿透接口 比如 <a href="http://xx.xx.xxx.xxx">xx.xx.xxx.xxx</a>:yyyy</p></blockquote><h3 id="番外篇：VNC问题：">番外篇：VNC问题：</h3><p>如果是黑屏：</p><blockquote><p>网上普遍的做法是：<br>在设置里面调整什么分辨率什么的（我有点忘了）<br>关键这个选项还有点难找，因为4B的选项跟原来的不一样<br>然后小心点找是有的，出现了远程显示后问题又来了<br>分辨率不对：就是整个屏幕放大了，很难受</p></blockquote><hr><ul><li>最后找到的做法是(资料)：</li></ul><blockquote><p>vncserver -geometry 1920x1080 -randr 1920x1080<br>xrandr -s 1920x1080<br>如果鼠标变成一个叉号了，再输入如下命令:<br>lxappearance<br>以后重启还会恢复的，但是树莓派怕是1年都不会停吧</p></blockquote><ul><li><p>vncserver :7 -geometry 1920x1080 这条命令的意思是在默认端口上＋6</p></li><li><p>我的做法：<br><img src="/img/mics/ca3289f9e89c41628c77c586bb4b34ce.webp" alt="" style="zoom:80%;" /></p></li></ul><blockquote><p>vncserver :2 -geometry 1920x1080<br>前提是保证5091 + 1 即5092端口开的<br>出现鼠标为叉叉 lxappearance<br>搞定</p></blockquote><h3 id="番外篇：当重启之后需要干什么：">番外篇：当重启之后需要干什么：</h3><ul><li>有必要的话，调整下系统时间</li></ul><blockquote><p>date 查看时间是否正确</p></blockquote><ul><li>VNC设置</li></ul><blockquote><p>vncserver :1 -geometry 1920x1080 设置</p></blockquote><ul><li>内网穿透重新设置</li></ul><h2 id="总结-3">总结</h2><p>这个应该算是全的吧 QAQ<br>至于为什么写，因为当初我找这些资料都用了很多时间，希望能帮助到各位<br>我的树莓目的已经达到了，机器学习的大佬，还要继续折腾才行<br>如果有什么错误，请在评论区指出<br>若果有帮助，点个赞吧，嘻嘻</p><h2 id="参考链接">参考链接</h2><p><a href="https://blog.csdn.net/iefenghao/article/details/88836303">https://blog.csdn.net/iefenghao/article/details/88836303</a><br><a href="https://blog.csdn.net/oneil2016/article/details/51837627">https://blog.csdn.net/oneil2016/article/details/51837627</a><br><a href="https://blog.csdn.net/xnlay/article/details/79048508">https://blog.csdn.net/xnlay/article/details/79048508</a><br><a href="https://www.cnblogs.com/suiyueshentou/p/7798340.html">https://www.cnblogs.com/suiyueshentou/p/7798340.html</a><br><a href="https://blog.csdn.net/zuoguaishouxiao/article/details/106142955">https://blog.csdn.net/zuoguaishouxiao/article/details/106142955</a><br><a href="https://blog.csdn.net/a497785609/article/details/77944327">https://blog.csdn.net/a497785609/article/details/77944327</a><br><a href="https://blog.csdn.net/weixin_44513679/article/details/116142001">https://blog.csdn.net/weixin_44513679/article/details/116142001</a><br><a href="https://blog.csdn.net/deyafoo/article/details/105243894">https://blog.csdn.net/deyafoo/article/details/105243894</a></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ClashX测速失败以及Mac终端走代理</title>
      <link href="/article/567e1422.html"/>
      <url>/article/567e1422.html</url>
      
        <content type="html"><![CDATA[<h2 id="ClashX测速失败以及Mac终端走代理">ClashX测速失败以及Mac终端走代理</h2><p>用机场也快一年半了，ClashX的话在Mac上很明显在终端上没有走代理</p><p>然后我写这篇在2021年份了，但是在<strong>CSDN上没法审核通过</strong>。</p><p>放到我博客上来科学上网，<strong>不然百度拿来看广告的</strong>？</p><div class="note green icon flat"><i class="note-icon fas fa-bullhorn"></i><p>注意：这是我的邀请链接（我可以收到 <strong>10%</strong> 的返利）</p><p>我一直在用，暂时没翻过车，然后推荐半年半年买，价格合理</p><p>我的链接： <a href="https://fastlink-aff.com/auth/register?code=HengY1Sky">https://fastlink-aff.com/auth/register?code=HengY1Sky</a></p></div><h2 id="下载Clashx">下载Clashx</h2><p>官方下载链接：<a href="https://github.com/yichengchen/clashX/releases">https://github.com/yichengchen/clashX/releases</a></p><img src="/img/mics/20210309210610923.webp" alt="选择Clashx.dmg下载" style="zoom:80%;" /><h2 id="测速失败">测速失败</h2><p><strong>我的原因是：</strong><br>系统时间慢啦，<strong>是整整慢了一天</strong>！<br>说来搞笑，我测速不管怎样都是失败。<br>时分秒都显示正确，花了几个晚上去翻看帖子。<br>Github上的issue在小火箭和Clashx看到了凌晨<br>都没解决，突然看到时间慢了一天，当时真想哭又想笑</p><p><strong>还有个原因：</strong><br>ClashX内置dns不通引起的问题：<br>这功能是让网络更干净，但特殊时期dns不通了倒直接卡住了，此时请关闭该功能。<br><strong>方法如下：</strong><br>点击<strong>小猫咪〉配置〉打开本地配置文件夹</strong><br>用文本编辑器打开编辑 yaml配置文件<br>将 dns下的 <strong>enable</strong> 值改为 <strong>false</strong><br>修改保存后默认系统会弹出重载配置提示，点击重载</p><h2 id="终端走代理">终端走代理</h2><p>我是看了这位大佬的帖子<a href="https://blog.csdn.net/DSZhappy/article/details/108393159?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=clashxmac%E7%BB%88%E7%AB%AF%E4%BB%A3%E7%90%86&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-108393159.pc_search_result_before_js">Clashx走终端</a><br>但他只说了结果，具体方法得自己摸索<br>其实现在弄多了之后，也很快找到了具体的解决方法。</p><p><strong>1.第一步</strong></p><p><code>vim .bash_profile</code></p><p><strong>2. 第二步：</strong></p><p><code>输入i-&gt;进入insert-&gt; 复制下面内容 -&gt;：wq!(强制写入退出)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function proxy_on() &#123;</span><br><span class="line">    export no_proxy=&quot;localhost,127.0.0.1,localaddress,.localdomain.com&quot;</span><br><span class="line">    export http_proxy=&quot;http://127.0.0.1:7890&quot;</span><br><span class="line">    export https_proxy=$http_proxy</span><br><span class="line">    #export all_proxy=socks5://127.0.0.1:7890 # or this line</span><br><span class="line">    echo -e &quot;已开启代理&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function proxy_off()&#123;</span><br><span class="line">    unset http_proxy</span><br><span class="line">    unset https_proxy</span><br><span class="line">    echo -e &quot;已关闭代理&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/img/mics/20210309212421139.webp" alt="效果图" style="zoom:80%;" /><p><strong>4. 第四步：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><p><strong>5.第五步：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ open -e .zshrc</span><br></pre></td></tr></table></figure><img src="/img/mics/20210309213339480.webp" alt="效果图" style="zoom:80%;" /><p><strong>6.第六步</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> .zshrc</span><br></pre></td></tr></table></figure><p>恭喜你！到这步就可以啦！</p><p>重新打开终端 <code>proxy_on</code>就打开了 不管是Git啥的都快很多。</p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
